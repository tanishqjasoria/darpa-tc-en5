/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A directed edge connecting two nodes, with arbitrary properties. */
@org.apache.avro.specific.AvroGenerated
public class LabeledEdge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1040665693909263983L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LabeledEdge\",\"namespace\":\"com.bbn.tc.schema.avro\",\"doc\":\"A directed edge connecting two nodes, with arbitrary properties.\",\"fields\":[{\"name\":\"label\",\"type\":{\"type\":\"enum\",\"name\":\"EDGE_LABELS\",\"symbols\":[\"modified\",\"wasAssociatedWith\",\"generated\",\"read\",\"actedOn\",\"wasGeneratedBy\"]},\"doc\":\"Edges label, role in the domain.\",\"default\":\"wasAssociatedWith\"},{\"name\":\"fromNode\",\"type\":{\"type\":\"record\",\"name\":\"LabeledNode\",\"doc\":\"A labeled node in a labeled property graph with properties\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Node's unique identifier.\"},{\"name\":\"label\",\"type\":{\"type\":\"enum\",\"name\":\"NODE_LABELS\",\"symbols\":[\"unitOfExecution\",\"artifact\",\"agent\"]},\"doc\":\"Node's label, role in the domain.\",\"default\":\"artifact\"},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Arbitrary key, value pairs describing the node.\",\"default\":null,\"order\":\"ignore\"}]},\"doc\":\"The from node on the edge.\"},{\"name\":\"toNode\",\"type\":\"LabeledNode\",\"doc\":\"The to node on the edge.\"},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Arbitrary key, value pairs describing the node.\",\"default\":null,\"order\":\"ignore\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LabeledEdge> ENCODER =
      new BinaryMessageEncoder<LabeledEdge>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LabeledEdge> DECODER =
      new BinaryMessageDecoder<LabeledEdge>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LabeledEdge> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LabeledEdge> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LabeledEdge>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LabeledEdge to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LabeledEdge from a ByteBuffer. */
  public static LabeledEdge fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Edges label, role in the domain. */
  @Deprecated public com.bbn.tc.schema.avro.EDGE_LABELS label;
  /** The from node on the edge. */
  @Deprecated public com.bbn.tc.schema.avro.LabeledNode fromNode;
  /** The to node on the edge. */
  @Deprecated public com.bbn.tc.schema.avro.LabeledNode toNode;
  /** Arbitrary key, value pairs describing the node. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LabeledEdge() {}

  /**
   * All-args constructor.
   * @param label Edges label, role in the domain.
   * @param fromNode The from node on the edge.
   * @param toNode The to node on the edge.
   * @param properties Arbitrary key, value pairs describing the node.
   */
  public LabeledEdge(com.bbn.tc.schema.avro.EDGE_LABELS label, com.bbn.tc.schema.avro.LabeledNode fromNode, com.bbn.tc.schema.avro.LabeledNode toNode, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties) {
    this.label = label;
    this.fromNode = fromNode;
    this.toNode = toNode;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return label;
    case 1: return fromNode;
    case 2: return toNode;
    case 3: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: label = (com.bbn.tc.schema.avro.EDGE_LABELS)value$; break;
    case 1: fromNode = (com.bbn.tc.schema.avro.LabeledNode)value$; break;
    case 2: toNode = (com.bbn.tc.schema.avro.LabeledNode)value$; break;
    case 3: properties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'label' field.
   * @return Edges label, role in the domain.
   */
  public com.bbn.tc.schema.avro.EDGE_LABELS getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * Edges label, role in the domain.
   * @param value the value to set.
   */
  public void setLabel(com.bbn.tc.schema.avro.EDGE_LABELS value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'fromNode' field.
   * @return The from node on the edge.
   */
  public com.bbn.tc.schema.avro.LabeledNode getFromNode() {
    return fromNode;
  }

  /**
   * Sets the value of the 'fromNode' field.
   * The from node on the edge.
   * @param value the value to set.
   */
  public void setFromNode(com.bbn.tc.schema.avro.LabeledNode value) {
    this.fromNode = value;
  }

  /**
   * Gets the value of the 'toNode' field.
   * @return The to node on the edge.
   */
  public com.bbn.tc.schema.avro.LabeledNode getToNode() {
    return toNode;
  }

  /**
   * Sets the value of the 'toNode' field.
   * The to node on the edge.
   * @param value the value to set.
   */
  public void setToNode(com.bbn.tc.schema.avro.LabeledNode value) {
    this.toNode = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return Arbitrary key, value pairs describing the node.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * Arbitrary key, value pairs describing the node.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.properties = value;
  }

  /**
   * Creates a new LabeledEdge RecordBuilder.
   * @return A new LabeledEdge RecordBuilder
   */
  public static com.bbn.tc.schema.avro.LabeledEdge.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.LabeledEdge.Builder();
  }

  /**
   * Creates a new LabeledEdge RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LabeledEdge RecordBuilder
   */
  public static com.bbn.tc.schema.avro.LabeledEdge.Builder newBuilder(com.bbn.tc.schema.avro.LabeledEdge.Builder other) {
    return new com.bbn.tc.schema.avro.LabeledEdge.Builder(other);
  }

  /**
   * Creates a new LabeledEdge RecordBuilder by copying an existing LabeledEdge instance.
   * @param other The existing instance to copy.
   * @return A new LabeledEdge RecordBuilder
   */
  public static com.bbn.tc.schema.avro.LabeledEdge.Builder newBuilder(com.bbn.tc.schema.avro.LabeledEdge other) {
    return new com.bbn.tc.schema.avro.LabeledEdge.Builder(other);
  }

  /**
   * RecordBuilder for LabeledEdge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LabeledEdge>
    implements org.apache.avro.data.RecordBuilder<LabeledEdge> {

    /** Edges label, role in the domain. */
    private com.bbn.tc.schema.avro.EDGE_LABELS label;
    /** The from node on the edge. */
    private com.bbn.tc.schema.avro.LabeledNode fromNode;
    private com.bbn.tc.schema.avro.LabeledNode.Builder fromNodeBuilder;
    /** The to node on the edge. */
    private com.bbn.tc.schema.avro.LabeledNode toNode;
    private com.bbn.tc.schema.avro.LabeledNode.Builder toNodeBuilder;
    /** Arbitrary key, value pairs describing the node. */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.LabeledEdge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fromNode)) {
        this.fromNode = data().deepCopy(fields()[1].schema(), other.fromNode);
        fieldSetFlags()[1] = true;
      }
      if (other.hasFromNodeBuilder()) {
        this.fromNodeBuilder = com.bbn.tc.schema.avro.LabeledNode.newBuilder(other.getFromNodeBuilder());
      }
      if (isValidValue(fields()[2], other.toNode)) {
        this.toNode = data().deepCopy(fields()[2].schema(), other.toNode);
        fieldSetFlags()[2] = true;
      }
      if (other.hasToNodeBuilder()) {
        this.toNodeBuilder = com.bbn.tc.schema.avro.LabeledNode.newBuilder(other.getToNodeBuilder());
      }
      if (isValidValue(fields()[3], other.properties)) {
        this.properties = data().deepCopy(fields()[3].schema(), other.properties);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LabeledEdge instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.LabeledEdge other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fromNode)) {
        this.fromNode = data().deepCopy(fields()[1].schema(), other.fromNode);
        fieldSetFlags()[1] = true;
      }
      this.fromNodeBuilder = null;
      if (isValidValue(fields()[2], other.toNode)) {
        this.toNode = data().deepCopy(fields()[2].schema(), other.toNode);
        fieldSetFlags()[2] = true;
      }
      this.toNodeBuilder = null;
      if (isValidValue(fields()[3], other.properties)) {
        this.properties = data().deepCopy(fields()[3].schema(), other.properties);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'label' field.
      * Edges label, role in the domain.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.EDGE_LABELS getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * Edges label, role in the domain.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder setLabel(com.bbn.tc.schema.avro.EDGE_LABELS value) {
      validate(fields()[0], value);
      this.label = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * Edges label, role in the domain.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'label' field.
      * Edges label, role in the domain.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder clearLabel() {
      label = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromNode' field.
      * The from node on the edge.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.LabeledNode getFromNode() {
      return fromNode;
    }

    /**
      * Sets the value of the 'fromNode' field.
      * The from node on the edge.
      * @param value The value of 'fromNode'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder setFromNode(com.bbn.tc.schema.avro.LabeledNode value) {
      validate(fields()[1], value);
      this.fromNodeBuilder = null;
      this.fromNode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fromNode' field has been set.
      * The from node on the edge.
      * @return True if the 'fromNode' field has been set, false otherwise.
      */
    public boolean hasFromNode() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'fromNode' field and creates one if it doesn't exist yet.
     * The from node on the edge.
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.LabeledNode.Builder getFromNodeBuilder() {
      if (fromNodeBuilder == null) {
        if (hasFromNode()) {
          setFromNodeBuilder(com.bbn.tc.schema.avro.LabeledNode.newBuilder(fromNode));
        } else {
          setFromNodeBuilder(com.bbn.tc.schema.avro.LabeledNode.newBuilder());
        }
      }
      return fromNodeBuilder;
    }

    /**
     * Sets the Builder instance for the 'fromNode' field
     * The from node on the edge.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder setFromNodeBuilder(com.bbn.tc.schema.avro.LabeledNode.Builder value) {
      clearFromNode();
      fromNodeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fromNode' field has an active Builder instance
     * The from node on the edge.
     * @return True if the 'fromNode' field has an active Builder instance
     */
    public boolean hasFromNodeBuilder() {
      return fromNodeBuilder != null;
    }

    /**
      * Clears the value of the 'fromNode' field.
      * The from node on the edge.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder clearFromNode() {
      fromNode = null;
      fromNodeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'toNode' field.
      * The to node on the edge.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.LabeledNode getToNode() {
      return toNode;
    }

    /**
      * Sets the value of the 'toNode' field.
      * The to node on the edge.
      * @param value The value of 'toNode'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder setToNode(com.bbn.tc.schema.avro.LabeledNode value) {
      validate(fields()[2], value);
      this.toNodeBuilder = null;
      this.toNode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'toNode' field has been set.
      * The to node on the edge.
      * @return True if the 'toNode' field has been set, false otherwise.
      */
    public boolean hasToNode() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'toNode' field and creates one if it doesn't exist yet.
     * The to node on the edge.
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.LabeledNode.Builder getToNodeBuilder() {
      if (toNodeBuilder == null) {
        if (hasToNode()) {
          setToNodeBuilder(com.bbn.tc.schema.avro.LabeledNode.newBuilder(toNode));
        } else {
          setToNodeBuilder(com.bbn.tc.schema.avro.LabeledNode.newBuilder());
        }
      }
      return toNodeBuilder;
    }

    /**
     * Sets the Builder instance for the 'toNode' field
     * The to node on the edge.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder setToNodeBuilder(com.bbn.tc.schema.avro.LabeledNode.Builder value) {
      clearToNode();
      toNodeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'toNode' field has an active Builder instance
     * The to node on the edge.
     * @return True if the 'toNode' field has an active Builder instance
     */
    public boolean hasToNodeBuilder() {
      return toNodeBuilder != null;
    }

    /**
      * Clears the value of the 'toNode' field.
      * The to node on the edge.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder clearToNode() {
      toNode = null;
      toNodeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * Arbitrary key, value pairs describing the node.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * Arbitrary key, value pairs describing the node.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.properties = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * Arbitrary key, value pairs describing the node.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'properties' field.
      * Arbitrary key, value pairs describing the node.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.LabeledEdge.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LabeledEdge build() {
      try {
        LabeledEdge record = new LabeledEdge();
        record.label = fieldSetFlags()[0] ? this.label : (com.bbn.tc.schema.avro.EDGE_LABELS) defaultValue(fields()[0]);
        if (fromNodeBuilder != null) {
          record.fromNode = this.fromNodeBuilder.build();
        } else {
          record.fromNode = fieldSetFlags()[1] ? this.fromNode : (com.bbn.tc.schema.avro.LabeledNode) defaultValue(fields()[1]);
        }
        if (toNodeBuilder != null) {
          record.toNode = this.toNodeBuilder.build();
        } else {
          record.toNode = fieldSetFlags()[2] ? this.toNode : (com.bbn.tc.schema.avro.LabeledNode) defaultValue(fields()[2]);
        }
        record.properties = fieldSetFlags()[3] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LabeledEdge>
    WRITER$ = (org.apache.avro.io.DatumWriter<LabeledEdge>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LabeledEdge>
    READER$ = (org.apache.avro.io.DatumReader<LabeledEdge>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
