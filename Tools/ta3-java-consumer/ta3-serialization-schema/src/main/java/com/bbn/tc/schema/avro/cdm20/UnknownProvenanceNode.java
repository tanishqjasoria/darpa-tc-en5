/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm20;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** * An UnknownProvenanceNode communicates that a Value (of an
     * Event) has unknown provenance. This record can be used anywhere
     * a ProvenanceTagNode can be used. 
     *
     * Example use cases from the ClearScope team: During the early
     * stages of device boot we are not tracking; files are written
     * during these stages, and when they are later read, we would
     * like to report the (earliest) provenance as unknown. Also, for
     * some processes we do not have our full-precision tracking
     * enabled, and we would like to communicate to the TA2 analyses
     * that a Value has unknown provenance, but that the value was
     * generated by a particular program, possibly at a particular
     * program point.
     * 
     * Semantically, if a Value is tagged with an
     * UnknownProvenanceNode with a Subject, this means that the Value
     * could have any provenance generated by that Subject up to the
     * point the UnknownProvnenanceNode was generated.
     *
     * If a Value is tagged with an UnknownProvenanceNode with no
     * subject, it should be conservatively interpreted as meaning the
     * value could have any "provenance" defined by the system up to
     * the point the UnknownProvenanceNode was created. */
@org.apache.avro.specific.AvroGenerated
public class UnknownProvenanceNode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8278269285307476082L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UnknownProvenanceNode\",\"namespace\":\"com.bbn.tc.schema.avro.cdm20\",\"doc\":\"* An UnknownProvenanceNode communicates that a Value (of an\\n     * Event) has unknown provenance. This record can be used anywhere\\n     * a ProvenanceTagNode can be used. \\n     *\\n     * Example use cases from the ClearScope team: During the early\\n     * stages of device boot we are not tracking; files are written\\n     * during these stages, and when they are later read, we would\\n     * like to report the (earliest) provenance as unknown. Also, for\\n     * some processes we do not have our full-precision tracking\\n     * enabled, and we would like to communicate to the TA2 analyses\\n     * that a Value has unknown provenance, but that the value was\\n     * generated by a particular program, possibly at a particular\\n     * program point.\\n     * \\n     * Semantically, if a Value is tagged with an\\n     * UnknownProvenanceNode with a Subject, this means that the Value\\n     * could have any provenance generated by that Subject up to the\\n     * point the UnknownProvnenanceNode was generated.\\n     *\\n     * If a Value is tagged with an UnknownProvenanceNode with no\\n     * subject, it should be conservatively interpreted as meaning the\\n     * value could have any \\\"provenance\\\" defined by the system up to\\n     * the point the UnknownProvenanceNode was created.\",\"fields\":[{\"name\":\"upnTagId\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"doc\":\"* A host MUST NOT reuse UUIDs at all within their system, even\\n     * across restarts, and definitely not for 2 distinct objects\",\"size\":16},\"doc\":\"Tag ID for this node *\"},{\"name\":\"subject\",\"type\":[\"null\",\"UUID\"],\"doc\":\"the subject that generated this UnknownProvenanceNode, optional\",\"default\":null},{\"name\":\"programPoint\",\"type\":[\"null\",\"string\"],\"doc\":\"The program point where the node was created\\n            (e.g., executable and line number), (Optional)\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null,\"order\":\"ignore\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UnknownProvenanceNode> ENCODER =
      new BinaryMessageEncoder<UnknownProvenanceNode>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UnknownProvenanceNode> DECODER =
      new BinaryMessageDecoder<UnknownProvenanceNode>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<UnknownProvenanceNode> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<UnknownProvenanceNode> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UnknownProvenanceNode>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this UnknownProvenanceNode to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a UnknownProvenanceNode from a ByteBuffer. */
  public static UnknownProvenanceNode fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Tag ID for this node * */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID upnTagId;
  /** the subject that generated this UnknownProvenanceNode, optional */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID subject;
  /** The program point where the node was created
            (e.g., executable and line number), (Optional) */
  @Deprecated public java.lang.CharSequence programPoint;
  /** * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UnknownProvenanceNode() {}

  /**
   * All-args constructor.
   * @param upnTagId Tag ID for this node *
   * @param subject the subject that generated this UnknownProvenanceNode, optional
   * @param programPoint The program point where the node was created
            (e.g., executable and line number), (Optional)
   * @param properties * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   */
  public UnknownProvenanceNode(com.bbn.tc.schema.avro.cdm20.UUID upnTagId, com.bbn.tc.schema.avro.cdm20.UUID subject, java.lang.CharSequence programPoint, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties) {
    this.upnTagId = upnTagId;
    this.subject = subject;
    this.programPoint = programPoint;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return upnTagId;
    case 1: return subject;
    case 2: return programPoint;
    case 3: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: upnTagId = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 1: subject = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 2: programPoint = (java.lang.CharSequence)value$; break;
    case 3: properties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'upnTagId' field.
   * @return Tag ID for this node *
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getUpnTagId() {
    return upnTagId;
  }

  /**
   * Sets the value of the 'upnTagId' field.
   * Tag ID for this node *
   * @param value the value to set.
   */
  public void setUpnTagId(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.upnTagId = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return the subject that generated this UnknownProvenanceNode, optional
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getSubject() {
    return subject;
  }

  /**
   * Sets the value of the 'subject' field.
   * the subject that generated this UnknownProvenanceNode, optional
   * @param value the value to set.
   */
  public void setSubject(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'programPoint' field.
   * @return The program point where the node was created
            (e.g., executable and line number), (Optional)
   */
  public java.lang.CharSequence getProgramPoint() {
    return programPoint;
  }

  /**
   * Sets the value of the 'programPoint' field.
   * The program point where the node was created
            (e.g., executable and line number), (Optional)
   * @param value the value to set.
   */
  public void setProgramPoint(java.lang.CharSequence value) {
    this.programPoint = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.properties = value;
  }

  /**
   * Creates a new UnknownProvenanceNode RecordBuilder.
   * @return A new UnknownProvenanceNode RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder();
  }

  /**
   * Creates a new UnknownProvenanceNode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UnknownProvenanceNode RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder other) {
    return new com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder(other);
  }

  /**
   * Creates a new UnknownProvenanceNode RecordBuilder by copying an existing UnknownProvenanceNode instance.
   * @param other The existing instance to copy.
   * @return A new UnknownProvenanceNode RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode other) {
    return new com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder(other);
  }

  /**
   * RecordBuilder for UnknownProvenanceNode instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UnknownProvenanceNode>
    implements org.apache.avro.data.RecordBuilder<UnknownProvenanceNode> {

    /** Tag ID for this node * */
    private com.bbn.tc.schema.avro.cdm20.UUID upnTagId;
    /** the subject that generated this UnknownProvenanceNode, optional */
    private com.bbn.tc.schema.avro.cdm20.UUID subject;
    /** The program point where the node was created
            (e.g., executable and line number), (Optional) */
    private java.lang.CharSequence programPoint;
    /** * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version. */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.upnTagId)) {
        this.upnTagId = data().deepCopy(fields()[0].schema(), other.upnTagId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subject)) {
        this.subject = data().deepCopy(fields()[1].schema(), other.subject);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.programPoint)) {
        this.programPoint = data().deepCopy(fields()[2].schema(), other.programPoint);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.properties)) {
        this.properties = data().deepCopy(fields()[3].schema(), other.properties);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UnknownProvenanceNode instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.upnTagId)) {
        this.upnTagId = data().deepCopy(fields()[0].schema(), other.upnTagId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subject)) {
        this.subject = data().deepCopy(fields()[1].schema(), other.subject);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.programPoint)) {
        this.programPoint = data().deepCopy(fields()[2].schema(), other.programPoint);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.properties)) {
        this.properties = data().deepCopy(fields()[3].schema(), other.properties);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'upnTagId' field.
      * Tag ID for this node *
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getUpnTagId() {
      return upnTagId;
    }

    /**
      * Sets the value of the 'upnTagId' field.
      * Tag ID for this node *
      * @param value The value of 'upnTagId'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder setUpnTagId(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[0], value);
      this.upnTagId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'upnTagId' field has been set.
      * Tag ID for this node *
      * @return True if the 'upnTagId' field has been set, false otherwise.
      */
    public boolean hasUpnTagId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'upnTagId' field.
      * Tag ID for this node *
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder clearUpnTagId() {
      upnTagId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * the subject that generated this UnknownProvenanceNode, optional
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getSubject() {
      return subject;
    }

    /**
      * Sets the value of the 'subject' field.
      * the subject that generated this UnknownProvenanceNode, optional
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder setSubject(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[1], value);
      this.subject = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * the subject that generated this UnknownProvenanceNode, optional
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subject' field.
      * the subject that generated this UnknownProvenanceNode, optional
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'programPoint' field.
      * The program point where the node was created
            (e.g., executable and line number), (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getProgramPoint() {
      return programPoint;
    }

    /**
      * Sets the value of the 'programPoint' field.
      * The program point where the node was created
            (e.g., executable and line number), (Optional)
      * @param value The value of 'programPoint'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder setProgramPoint(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.programPoint = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'programPoint' field has been set.
      * The program point where the node was created
            (e.g., executable and line number), (Optional)
      * @return True if the 'programPoint' field has been set, false otherwise.
      */
    public boolean hasProgramPoint() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'programPoint' field.
      * The program point where the node was created
            (e.g., executable and line number), (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder clearProgramPoint() {
      programPoint = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.properties = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.UnknownProvenanceNode.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UnknownProvenanceNode build() {
      try {
        UnknownProvenanceNode record = new UnknownProvenanceNode();
        record.upnTagId = fieldSetFlags()[0] ? this.upnTagId : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[0]);
        record.subject = fieldSetFlags()[1] ? this.subject : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[1]);
        record.programPoint = fieldSetFlags()[2] ? this.programPoint : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.properties = fieldSetFlags()[3] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UnknownProvenanceNode>
    WRITER$ = (org.apache.avro.io.DatumWriter<UnknownProvenanceNode>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UnknownProvenanceNode>
    READER$ = (org.apache.avro.io.DatumReader<UnknownProvenanceNode>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
