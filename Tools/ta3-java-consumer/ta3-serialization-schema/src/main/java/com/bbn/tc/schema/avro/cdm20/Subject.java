/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm20;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** * Subjects represent execution contexts and include mainly threads and processes. They can be more granular and
     * can represent other execution boundaries such as units and blocks if needed. */
@org.apache.avro.specific.AvroGenerated
public class Subject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2176477399474833453L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Subject\",\"namespace\":\"com.bbn.tc.schema.avro.cdm20\",\"doc\":\"* Subjects represent execution contexts and include mainly threads and processes. They can be more granular and\\n     * can represent other execution boundaries such as units and blocks if needed.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"doc\":\"* A host MUST NOT reuse UUIDs at all within their system, even\\n     * across restarts, and definitely not for 2 distinct objects\",\"size\":16},\"doc\":\"universally unique identifier for the subject\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SubjectType\",\"doc\":\"* SubjectType enumerates the types of execution contexts supported.\\n     *\\n     * SUBJECT_PROCESS,    process\\n     * SUBJECT_THREAD,     thread within a process\\n     * SUBJECT_UNIT        so far we only know of TRACE BEEP using this\",\"symbols\":[\"SUBJECT_PROCESS\",\"SUBJECT_THREAD\",\"SUBJECT_UNIT\",\"SUBJECT_BASIC_BLOCK\",\"SUBJECT_OTHER\"]},\"doc\":\"the subject type\"},{\"name\":\"cid\",\"type\":\"int\",\"doc\":\"Context ID: OS process id for type process, thread id for threads\"},{\"name\":\"parentSubject\",\"type\":[\"null\",\"UUID\"],\"doc\":\"* parent subject's UUID. For a process, this is a parent\\n         * process. For a thread, this is the process that created the\\n         * thread. Only optional because in some cases the parent may not\\n         * be known; null value indicates that the parent is unknown.\",\"default\":null},{\"name\":\"localPrincipal\",\"type\":[\"null\",\"UUID\"],\"doc\":\"* UUID of local principal that owns this subject This\\n         * attribute is optional because there are times when\\n         * the owner of the subject may not be known at the time the file\\n         * object is reported (e.g., missed open call). Otherwise,\\n         * the local principal SHOULD be included.\",\"default\":null},{\"name\":\"startTimestampNanos\",\"type\":[\"null\",\"long\"],\"doc\":\"* The start time of the subject\\n         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\\n         *\\n         * This attribute is optional because there are times when the\\n         * subject's start time may not be known. This happens when\\n         * the subject was started before TC instrumentation software\\n         * was started. Otherwise, the timestamp SHOULD be included.\",\"default\":null},{\"name\":\"unitId\",\"type\":[\"null\",\"int\"],\"doc\":\"unit id for unit based instrumentation (Optional)\",\"default\":null},{\"name\":\"iteration\",\"type\":[\"null\",\"int\"],\"doc\":\"iteration and count are used for distinguishing individual \\\"units\\\" of execution (Optional)\",\"default\":null},{\"name\":\"count\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"cmdLine\",\"type\":[\"null\",\"string\"],\"doc\":\"Process command line arguments including process name (Optional)\",\"default\":null},{\"name\":\"privilegeLevel\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"PrivilegeLevel\",\"doc\":\"* Windows allows Subjects (processes) to have the following\\n     * enumerated privilege levels.\",\"symbols\":[\"LIMITED\",\"ELEVATED\",\"FULL\"]}],\"doc\":\"Windows allows processes to have different privilege levels (Optional)\",\"default\":null},{\"name\":\"importedLibraries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"* imported libraries. (Optional). Lists the libraries that\\n         * are expected to be loaded, but may not necessarily\\n         * correspond 1-to-1 with actual load library events because\\n         * some libraries may already be loaded when this event\\n         * occurs.\",\"default\":null},{\"name\":\"exportedLibraries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"exported libraries. (Optional)\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null,\"order\":\"ignore\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Subject> ENCODER =
      new BinaryMessageEncoder<Subject>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Subject> DECODER =
      new BinaryMessageDecoder<Subject>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Subject> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Subject> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Subject>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Subject to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Subject from a ByteBuffer. */
  public static Subject fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** universally unique identifier for the subject */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID uuid;
  /** the subject type */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.SubjectType type;
  /** Context ID: OS process id for type process, thread id for threads */
  @Deprecated public int cid;
  /** * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown. */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID parentSubject;
  /** * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included. */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID localPrincipal;
  /** * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included. */
  @Deprecated public java.lang.Long startTimestampNanos;
  /** unit id for unit based instrumentation (Optional) */
  @Deprecated public java.lang.Integer unitId;
  /** iteration and count are used for distinguishing individual "units" of execution (Optional) */
  @Deprecated public java.lang.Integer iteration;
  @Deprecated public java.lang.Integer count;
  /** Process command line arguments including process name (Optional) */
  @Deprecated public java.lang.CharSequence cmdLine;
  /** Windows allows processes to have different privilege levels (Optional) */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.PrivilegeLevel privilegeLevel;
  /** * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs. */
  @Deprecated public java.util.List<java.lang.CharSequence> importedLibraries;
  /** exported libraries. (Optional) */
  @Deprecated public java.util.List<java.lang.CharSequence> exportedLibraries;
  /** * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Subject() {}

  /**
   * All-args constructor.
   * @param uuid universally unique identifier for the subject
   * @param type the subject type
   * @param cid Context ID: OS process id for type process, thread id for threads
   * @param parentSubject * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown.
   * @param localPrincipal * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included.
   * @param startTimestampNanos * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included.
   * @param unitId unit id for unit based instrumentation (Optional)
   * @param iteration iteration and count are used for distinguishing individual "units" of execution (Optional)
   * @param count The new value for count
   * @param cmdLine Process command line arguments including process name (Optional)
   * @param privilegeLevel Windows allows processes to have different privilege levels (Optional)
   * @param importedLibraries * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs.
   * @param exportedLibraries exported libraries. (Optional)
   * @param properties * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   */
  public Subject(com.bbn.tc.schema.avro.cdm20.UUID uuid, com.bbn.tc.schema.avro.cdm20.SubjectType type, java.lang.Integer cid, com.bbn.tc.schema.avro.cdm20.UUID parentSubject, com.bbn.tc.schema.avro.cdm20.UUID localPrincipal, java.lang.Long startTimestampNanos, java.lang.Integer unitId, java.lang.Integer iteration, java.lang.Integer count, java.lang.CharSequence cmdLine, com.bbn.tc.schema.avro.cdm20.PrivilegeLevel privilegeLevel, java.util.List<java.lang.CharSequence> importedLibraries, java.util.List<java.lang.CharSequence> exportedLibraries, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties) {
    this.uuid = uuid;
    this.type = type;
    this.cid = cid;
    this.parentSubject = parentSubject;
    this.localPrincipal = localPrincipal;
    this.startTimestampNanos = startTimestampNanos;
    this.unitId = unitId;
    this.iteration = iteration;
    this.count = count;
    this.cmdLine = cmdLine;
    this.privilegeLevel = privilegeLevel;
    this.importedLibraries = importedLibraries;
    this.exportedLibraries = exportedLibraries;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return type;
    case 2: return cid;
    case 3: return parentSubject;
    case 4: return localPrincipal;
    case 5: return startTimestampNanos;
    case 6: return unitId;
    case 7: return iteration;
    case 8: return count;
    case 9: return cmdLine;
    case 10: return privilegeLevel;
    case 11: return importedLibraries;
    case 12: return exportedLibraries;
    case 13: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 1: type = (com.bbn.tc.schema.avro.cdm20.SubjectType)value$; break;
    case 2: cid = (java.lang.Integer)value$; break;
    case 3: parentSubject = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 4: localPrincipal = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 5: startTimestampNanos = (java.lang.Long)value$; break;
    case 6: unitId = (java.lang.Integer)value$; break;
    case 7: iteration = (java.lang.Integer)value$; break;
    case 8: count = (java.lang.Integer)value$; break;
    case 9: cmdLine = (java.lang.CharSequence)value$; break;
    case 10: privilegeLevel = (com.bbn.tc.schema.avro.cdm20.PrivilegeLevel)value$; break;
    case 11: importedLibraries = (java.util.List<java.lang.CharSequence>)value$; break;
    case 12: exportedLibraries = (java.util.List<java.lang.CharSequence>)value$; break;
    case 13: properties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return universally unique identifier for the subject
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * universally unique identifier for the subject
   * @param value the value to set.
   */
  public void setUuid(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return the subject type
   */
  public com.bbn.tc.schema.avro.cdm20.SubjectType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * the subject type
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.cdm20.SubjectType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'cid' field.
   * @return Context ID: OS process id for type process, thread id for threads
   */
  public java.lang.Integer getCid() {
    return cid;
  }

  /**
   * Sets the value of the 'cid' field.
   * Context ID: OS process id for type process, thread id for threads
   * @param value the value to set.
   */
  public void setCid(java.lang.Integer value) {
    this.cid = value;
  }

  /**
   * Gets the value of the 'parentSubject' field.
   * @return * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown.
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getParentSubject() {
    return parentSubject;
  }

  /**
   * Sets the value of the 'parentSubject' field.
   * * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown.
   * @param value the value to set.
   */
  public void setParentSubject(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.parentSubject = value;
  }

  /**
   * Gets the value of the 'localPrincipal' field.
   * @return * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included.
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getLocalPrincipal() {
    return localPrincipal;
  }

  /**
   * Sets the value of the 'localPrincipal' field.
   * * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included.
   * @param value the value to set.
   */
  public void setLocalPrincipal(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.localPrincipal = value;
  }

  /**
   * Gets the value of the 'startTimestampNanos' field.
   * @return * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included.
   */
  public java.lang.Long getStartTimestampNanos() {
    return startTimestampNanos;
  }

  /**
   * Sets the value of the 'startTimestampNanos' field.
   * * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included.
   * @param value the value to set.
   */
  public void setStartTimestampNanos(java.lang.Long value) {
    this.startTimestampNanos = value;
  }

  /**
   * Gets the value of the 'unitId' field.
   * @return unit id for unit based instrumentation (Optional)
   */
  public java.lang.Integer getUnitId() {
    return unitId;
  }

  /**
   * Sets the value of the 'unitId' field.
   * unit id for unit based instrumentation (Optional)
   * @param value the value to set.
   */
  public void setUnitId(java.lang.Integer value) {
    this.unitId = value;
  }

  /**
   * Gets the value of the 'iteration' field.
   * @return iteration and count are used for distinguishing individual "units" of execution (Optional)
   */
  public java.lang.Integer getIteration() {
    return iteration;
  }

  /**
   * Sets the value of the 'iteration' field.
   * iteration and count are used for distinguishing individual "units" of execution (Optional)
   * @param value the value to set.
   */
  public void setIteration(java.lang.Integer value) {
    this.iteration = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'cmdLine' field.
   * @return Process command line arguments including process name (Optional)
   */
  public java.lang.CharSequence getCmdLine() {
    return cmdLine;
  }

  /**
   * Sets the value of the 'cmdLine' field.
   * Process command line arguments including process name (Optional)
   * @param value the value to set.
   */
  public void setCmdLine(java.lang.CharSequence value) {
    this.cmdLine = value;
  }

  /**
   * Gets the value of the 'privilegeLevel' field.
   * @return Windows allows processes to have different privilege levels (Optional)
   */
  public com.bbn.tc.schema.avro.cdm20.PrivilegeLevel getPrivilegeLevel() {
    return privilegeLevel;
  }

  /**
   * Sets the value of the 'privilegeLevel' field.
   * Windows allows processes to have different privilege levels (Optional)
   * @param value the value to set.
   */
  public void setPrivilegeLevel(com.bbn.tc.schema.avro.cdm20.PrivilegeLevel value) {
    this.privilegeLevel = value;
  }

  /**
   * Gets the value of the 'importedLibraries' field.
   * @return * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs.
   */
  public java.util.List<java.lang.CharSequence> getImportedLibraries() {
    return importedLibraries;
  }

  /**
   * Sets the value of the 'importedLibraries' field.
   * * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs.
   * @param value the value to set.
   */
  public void setImportedLibraries(java.util.List<java.lang.CharSequence> value) {
    this.importedLibraries = value;
  }

  /**
   * Gets the value of the 'exportedLibraries' field.
   * @return exported libraries. (Optional)
   */
  public java.util.List<java.lang.CharSequence> getExportedLibraries() {
    return exportedLibraries;
  }

  /**
   * Sets the value of the 'exportedLibraries' field.
   * exported libraries. (Optional)
   * @param value the value to set.
   */
  public void setExportedLibraries(java.util.List<java.lang.CharSequence> value) {
    this.exportedLibraries = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.properties = value;
  }

  /**
   * Creates a new Subject RecordBuilder.
   * @return A new Subject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.Subject.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.cdm20.Subject.Builder();
  }

  /**
   * Creates a new Subject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Subject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.Subject.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.Subject.Builder other) {
    return new com.bbn.tc.schema.avro.cdm20.Subject.Builder(other);
  }

  /**
   * Creates a new Subject RecordBuilder by copying an existing Subject instance.
   * @param other The existing instance to copy.
   * @return A new Subject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.Subject.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.Subject other) {
    return new com.bbn.tc.schema.avro.cdm20.Subject.Builder(other);
  }

  /**
   * RecordBuilder for Subject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Subject>
    implements org.apache.avro.data.RecordBuilder<Subject> {

    /** universally unique identifier for the subject */
    private com.bbn.tc.schema.avro.cdm20.UUID uuid;
    /** the subject type */
    private com.bbn.tc.schema.avro.cdm20.SubjectType type;
    /** Context ID: OS process id for type process, thread id for threads */
    private int cid;
    /** * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown. */
    private com.bbn.tc.schema.avro.cdm20.UUID parentSubject;
    /** * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included. */
    private com.bbn.tc.schema.avro.cdm20.UUID localPrincipal;
    /** * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included. */
    private java.lang.Long startTimestampNanos;
    /** unit id for unit based instrumentation (Optional) */
    private java.lang.Integer unitId;
    /** iteration and count are used for distinguishing individual "units" of execution (Optional) */
    private java.lang.Integer iteration;
    private java.lang.Integer count;
    /** Process command line arguments including process name (Optional) */
    private java.lang.CharSequence cmdLine;
    /** Windows allows processes to have different privilege levels (Optional) */
    private com.bbn.tc.schema.avro.cdm20.PrivilegeLevel privilegeLevel;
    /** * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs. */
    private java.util.List<java.lang.CharSequence> importedLibraries;
    /** exported libraries. (Optional) */
    private java.util.List<java.lang.CharSequence> exportedLibraries;
    /** * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version. */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.Subject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cid)) {
        this.cid = data().deepCopy(fields()[2].schema(), other.cid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.parentSubject)) {
        this.parentSubject = data().deepCopy(fields()[3].schema(), other.parentSubject);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.localPrincipal)) {
        this.localPrincipal = data().deepCopy(fields()[4].schema(), other.localPrincipal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startTimestampNanos)) {
        this.startTimestampNanos = data().deepCopy(fields()[5].schema(), other.startTimestampNanos);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.unitId)) {
        this.unitId = data().deepCopy(fields()[6].schema(), other.unitId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.iteration)) {
        this.iteration = data().deepCopy(fields()[7].schema(), other.iteration);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.count)) {
        this.count = data().deepCopy(fields()[8].schema(), other.count);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.cmdLine)) {
        this.cmdLine = data().deepCopy(fields()[9].schema(), other.cmdLine);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.privilegeLevel)) {
        this.privilegeLevel = data().deepCopy(fields()[10].schema(), other.privilegeLevel);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.importedLibraries)) {
        this.importedLibraries = data().deepCopy(fields()[11].schema(), other.importedLibraries);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.exportedLibraries)) {
        this.exportedLibraries = data().deepCopy(fields()[12].schema(), other.exportedLibraries);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.properties)) {
        this.properties = data().deepCopy(fields()[13].schema(), other.properties);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Subject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.Subject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cid)) {
        this.cid = data().deepCopy(fields()[2].schema(), other.cid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.parentSubject)) {
        this.parentSubject = data().deepCopy(fields()[3].schema(), other.parentSubject);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.localPrincipal)) {
        this.localPrincipal = data().deepCopy(fields()[4].schema(), other.localPrincipal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startTimestampNanos)) {
        this.startTimestampNanos = data().deepCopy(fields()[5].schema(), other.startTimestampNanos);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.unitId)) {
        this.unitId = data().deepCopy(fields()[6].schema(), other.unitId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.iteration)) {
        this.iteration = data().deepCopy(fields()[7].schema(), other.iteration);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.count)) {
        this.count = data().deepCopy(fields()[8].schema(), other.count);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.cmdLine)) {
        this.cmdLine = data().deepCopy(fields()[9].schema(), other.cmdLine);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.privilegeLevel)) {
        this.privilegeLevel = data().deepCopy(fields()[10].schema(), other.privilegeLevel);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.importedLibraries)) {
        this.importedLibraries = data().deepCopy(fields()[11].schema(), other.importedLibraries);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.exportedLibraries)) {
        this.exportedLibraries = data().deepCopy(fields()[12].schema(), other.exportedLibraries);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.properties)) {
        this.properties = data().deepCopy(fields()[13].schema(), other.properties);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * universally unique identifier for the subject
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * universally unique identifier for the subject
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setUuid(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * universally unique identifier for the subject
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * universally unique identifier for the subject
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * the subject type
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.SubjectType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * the subject type
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setType(com.bbn.tc.schema.avro.cdm20.SubjectType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * the subject type
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * the subject type
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cid' field.
      * Context ID: OS process id for type process, thread id for threads
      * @return The value.
      */
    public java.lang.Integer getCid() {
      return cid;
    }

    /**
      * Sets the value of the 'cid' field.
      * Context ID: OS process id for type process, thread id for threads
      * @param value The value of 'cid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setCid(int value) {
      validate(fields()[2], value);
      this.cid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cid' field has been set.
      * Context ID: OS process id for type process, thread id for threads
      * @return True if the 'cid' field has been set, false otherwise.
      */
    public boolean hasCid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cid' field.
      * Context ID: OS process id for type process, thread id for threads
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearCid() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentSubject' field.
      * * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getParentSubject() {
      return parentSubject;
    }

    /**
      * Sets the value of the 'parentSubject' field.
      * * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown.
      * @param value The value of 'parentSubject'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setParentSubject(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[3], value);
      this.parentSubject = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'parentSubject' field has been set.
      * * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown.
      * @return True if the 'parentSubject' field has been set, false otherwise.
      */
    public boolean hasParentSubject() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'parentSubject' field.
      * * parent subject's UUID. For a process, this is a parent
         * process. For a thread, this is the process that created the
         * thread. Only optional because in some cases the parent may not
         * be known; null value indicates that the parent is unknown.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearParentSubject() {
      parentSubject = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'localPrincipal' field.
      * * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getLocalPrincipal() {
      return localPrincipal;
    }

    /**
      * Sets the value of the 'localPrincipal' field.
      * * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included.
      * @param value The value of 'localPrincipal'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setLocalPrincipal(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[4], value);
      this.localPrincipal = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'localPrincipal' field has been set.
      * * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included.
      * @return True if the 'localPrincipal' field has been set, false otherwise.
      */
    public boolean hasLocalPrincipal() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'localPrincipal' field.
      * * UUID of local principal that owns this subject This
         * attribute is optional because there are times when
         * the owner of the subject may not be known at the time the file
         * object is reported (e.g., missed open call). Otherwise,
         * the local principal SHOULD be included.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearLocalPrincipal() {
      localPrincipal = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTimestampNanos' field.
      * * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included.
      * @return The value.
      */
    public java.lang.Long getStartTimestampNanos() {
      return startTimestampNanos;
    }

    /**
      * Sets the value of the 'startTimestampNanos' field.
      * * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included.
      * @param value The value of 'startTimestampNanos'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setStartTimestampNanos(java.lang.Long value) {
      validate(fields()[5], value);
      this.startTimestampNanos = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'startTimestampNanos' field has been set.
      * * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included.
      * @return True if the 'startTimestampNanos' field has been set, false otherwise.
      */
    public boolean hasStartTimestampNanos() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'startTimestampNanos' field.
      * * The start time of the subject
         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC.
         *
         * This attribute is optional because there are times when the
         * subject's start time may not be known. This happens when
         * the subject was started before TC instrumentation software
         * was started. Otherwise, the timestamp SHOULD be included.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearStartTimestampNanos() {
      startTimestampNanos = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitId' field.
      * unit id for unit based instrumentation (Optional)
      * @return The value.
      */
    public java.lang.Integer getUnitId() {
      return unitId;
    }

    /**
      * Sets the value of the 'unitId' field.
      * unit id for unit based instrumentation (Optional)
      * @param value The value of 'unitId'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setUnitId(java.lang.Integer value) {
      validate(fields()[6], value);
      this.unitId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'unitId' field has been set.
      * unit id for unit based instrumentation (Optional)
      * @return True if the 'unitId' field has been set, false otherwise.
      */
    public boolean hasUnitId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'unitId' field.
      * unit id for unit based instrumentation (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearUnitId() {
      unitId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'iteration' field.
      * iteration and count are used for distinguishing individual "units" of execution (Optional)
      * @return The value.
      */
    public java.lang.Integer getIteration() {
      return iteration;
    }

    /**
      * Sets the value of the 'iteration' field.
      * iteration and count are used for distinguishing individual "units" of execution (Optional)
      * @param value The value of 'iteration'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setIteration(java.lang.Integer value) {
      validate(fields()[7], value);
      this.iteration = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'iteration' field has been set.
      * iteration and count are used for distinguishing individual "units" of execution (Optional)
      * @return True if the 'iteration' field has been set, false otherwise.
      */
    public boolean hasIteration() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'iteration' field.
      * iteration and count are used for distinguishing individual "units" of execution (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearIteration() {
      iteration = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public java.lang.Integer getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setCount(java.lang.Integer value) {
      validate(fields()[8], value);
      this.count = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearCount() {
      count = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'cmdLine' field.
      * Process command line arguments including process name (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getCmdLine() {
      return cmdLine;
    }

    /**
      * Sets the value of the 'cmdLine' field.
      * Process command line arguments including process name (Optional)
      * @param value The value of 'cmdLine'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setCmdLine(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.cmdLine = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'cmdLine' field has been set.
      * Process command line arguments including process name (Optional)
      * @return True if the 'cmdLine' field has been set, false otherwise.
      */
    public boolean hasCmdLine() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'cmdLine' field.
      * Process command line arguments including process name (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearCmdLine() {
      cmdLine = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'privilegeLevel' field.
      * Windows allows processes to have different privilege levels (Optional)
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.PrivilegeLevel getPrivilegeLevel() {
      return privilegeLevel;
    }

    /**
      * Sets the value of the 'privilegeLevel' field.
      * Windows allows processes to have different privilege levels (Optional)
      * @param value The value of 'privilegeLevel'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setPrivilegeLevel(com.bbn.tc.schema.avro.cdm20.PrivilegeLevel value) {
      validate(fields()[10], value);
      this.privilegeLevel = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'privilegeLevel' field has been set.
      * Windows allows processes to have different privilege levels (Optional)
      * @return True if the 'privilegeLevel' field has been set, false otherwise.
      */
    public boolean hasPrivilegeLevel() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'privilegeLevel' field.
      * Windows allows processes to have different privilege levels (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearPrivilegeLevel() {
      privilegeLevel = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'importedLibraries' field.
      * * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getImportedLibraries() {
      return importedLibraries;
    }

    /**
      * Sets the value of the 'importedLibraries' field.
      * * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs.
      * @param value The value of 'importedLibraries'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setImportedLibraries(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[11], value);
      this.importedLibraries = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'importedLibraries' field has been set.
      * * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs.
      * @return True if the 'importedLibraries' field has been set, false otherwise.
      */
    public boolean hasImportedLibraries() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'importedLibraries' field.
      * * imported libraries. (Optional). Lists the libraries that
         * are expected to be loaded, but may not necessarily
         * correspond 1-to-1 with actual load library events because
         * some libraries may already be loaded when this event
         * occurs.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearImportedLibraries() {
      importedLibraries = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'exportedLibraries' field.
      * exported libraries. (Optional)
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getExportedLibraries() {
      return exportedLibraries;
    }

    /**
      * Sets the value of the 'exportedLibraries' field.
      * exported libraries. (Optional)
      * @param value The value of 'exportedLibraries'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setExportedLibraries(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[12], value);
      this.exportedLibraries = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'exportedLibraries' field has been set.
      * exported libraries. (Optional)
      * @return True if the 'exportedLibraries' field has been set, false otherwise.
      */
    public boolean hasExportedLibraries() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'exportedLibraries' field.
      * exported libraries. (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearExportedLibraries() {
      exportedLibraries = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[13], value);
      this.properties = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'properties' field.
      * * Arbitrary key, value pairs describing the entity.
         * NOTE: This attribute is meant as a temporary place holder for items that
         * will become first-class attributes in the next CDM version.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Subject.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Subject build() {
      try {
        Subject record = new Subject();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (com.bbn.tc.schema.avro.cdm20.SubjectType) defaultValue(fields()[1]);
        record.cid = fieldSetFlags()[2] ? this.cid : (java.lang.Integer) defaultValue(fields()[2]);
        record.parentSubject = fieldSetFlags()[3] ? this.parentSubject : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[3]);
        record.localPrincipal = fieldSetFlags()[4] ? this.localPrincipal : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[4]);
        record.startTimestampNanos = fieldSetFlags()[5] ? this.startTimestampNanos : (java.lang.Long) defaultValue(fields()[5]);
        record.unitId = fieldSetFlags()[6] ? this.unitId : (java.lang.Integer) defaultValue(fields()[6]);
        record.iteration = fieldSetFlags()[7] ? this.iteration : (java.lang.Integer) defaultValue(fields()[7]);
        record.count = fieldSetFlags()[8] ? this.count : (java.lang.Integer) defaultValue(fields()[8]);
        record.cmdLine = fieldSetFlags()[9] ? this.cmdLine : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.privilegeLevel = fieldSetFlags()[10] ? this.privilegeLevel : (com.bbn.tc.schema.avro.cdm20.PrivilegeLevel) defaultValue(fields()[10]);
        record.importedLibraries = fieldSetFlags()[11] ? this.importedLibraries : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[11]);
        record.exportedLibraries = fieldSetFlags()[12] ? this.exportedLibraries : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[12]);
        record.properties = fieldSetFlags()[13] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[13]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Subject>
    WRITER$ = (org.apache.avro.io.DatumWriter<Subject>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Subject>
    READER$ = (org.apache.avro.io.DatumReader<Subject>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
