/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm20;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** * Represents a network flow object. Instantiates an AbstractObject. */
@org.apache.avro.specific.AvroGenerated
public class NetFlowObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1398127972475437657L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NetFlowObject\",\"namespace\":\"com.bbn.tc.schema.avro.cdm20\",\"doc\":\"* Represents a network flow object. Instantiates an AbstractObject.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"doc\":\"* A host MUST NOT reuse UUIDs at all within their system, even\\n     * across restarts, and definitely not for 2 distinct objects\",\"size\":16},\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":{\"type\":\"record\",\"name\":\"AbstractObject\",\"doc\":\"*  Objects, in general, represent data sources and sinks which\\n     *  could include sockets, files, memory, and any data in general\\n     *  that can be an input and/or output to an event.  This record\\n     *  is intended to be abstract i.e., one should not instantiate an\\n     *  Object but rather instantiate one of its sub types (ie,\\n     *  encapsulating records) FileObject, UnnamedPipeObject,\\n     *  RegistryKeyObject, NetFlowObject, MemoryObject, or\\n     *  SrcSinkObject.\",\"fields\":[{\"name\":\"permission\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"SHORT\",\"size\":2}],\"doc\":\"Permission bits defined over the object (Optional)\",\"default\":null},{\"name\":\"epoch\",\"type\":[\"null\",\"int\"],\"doc\":\"* Used to track when an object is deleted and a new one is\\n         * created with the same identifier. This is useful for when\\n         * UUIDs are based on something not likely to be unique, such\\n         * as file path.\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null,\"order\":\"ignore\"}]},\"doc\":\"The base object attributes\"},{\"name\":\"localAddress\",\"type\":[\"null\",\"string\"],\"doc\":\"* The local IP address for this flow. Optional for when not\\n         * obtained initially.\",\"default\":null},{\"name\":\"localPort\",\"type\":[\"null\",\"int\"],\"doc\":\"* The local network port for this flow. Optional for AF_UNIX\\n         * sockets (unnamed and abstract), or for when not obtained\\n         * initially.\",\"default\":null},{\"name\":\"remoteAddress\",\"type\":[\"null\",\"string\"],\"doc\":\"* The remote IP address for this flow. Optional for binds\\n         * that are a listening action and not a full connection, or\\n         * for when not obtained initially.\",\"default\":null},{\"name\":\"remotePort\",\"type\":[\"null\",\"int\"],\"doc\":\"* The remote network port for this flow. Optional for binds\\n         * that are a listening action and not a full connection. Also\\n         * optional for AF_UNIX sockets (unnamed and abstract) and for\\n         * when not obtained intially.\",\"default\":null},{\"name\":\"ipProtocol\",\"type\":[\"null\",\"int\"],\"doc\":\"The IP protocol number e.g., TCP=6\",\"default\":null},{\"name\":\"initTcpSeqNum\",\"type\":[\"null\",\"int\"],\"doc\":\"* The initial sequence number for a TCP connection (use the\\n         * SYN from the initiator). This is to correlate flows across\\n         * hosts for improved cross-host tracking.\",\"default\":null},{\"name\":\"fileDescriptor\",\"type\":[\"null\",\"int\"],\"doc\":\"The file descriptor (Optional)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NetFlowObject> ENCODER =
      new BinaryMessageEncoder<NetFlowObject>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NetFlowObject> DECODER =
      new BinaryMessageDecoder<NetFlowObject>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<NetFlowObject> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<NetFlowObject> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NetFlowObject>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this NetFlowObject to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a NetFlowObject from a ByteBuffer. */
  public static NetFlowObject fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Universally unique identifier for the object */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID uuid;
  /** The base object attributes */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject;
  /** * The local IP address for this flow. Optional for when not
         * obtained initially. */
  @Deprecated public java.lang.CharSequence localAddress;
  /** * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially. */
  @Deprecated public java.lang.Integer localPort;
  /** * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially. */
  @Deprecated public java.lang.CharSequence remoteAddress;
  /** * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially. */
  @Deprecated public java.lang.Integer remotePort;
  /** The IP protocol number e.g., TCP=6 */
  @Deprecated public java.lang.Integer ipProtocol;
  /** * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking. */
  @Deprecated public java.lang.Integer initTcpSeqNum;
  /** The file descriptor (Optional) */
  @Deprecated public java.lang.Integer fileDescriptor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NetFlowObject() {}

  /**
   * All-args constructor.
   * @param uuid Universally unique identifier for the object
   * @param baseObject The base object attributes
   * @param localAddress * The local IP address for this flow. Optional for when not
         * obtained initially.
   * @param localPort * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially.
   * @param remoteAddress * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially.
   * @param remotePort * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially.
   * @param ipProtocol The IP protocol number e.g., TCP=6
   * @param initTcpSeqNum * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking.
   * @param fileDescriptor The file descriptor (Optional)
   */
  public NetFlowObject(com.bbn.tc.schema.avro.cdm20.UUID uuid, com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject, java.lang.CharSequence localAddress, java.lang.Integer localPort, java.lang.CharSequence remoteAddress, java.lang.Integer remotePort, java.lang.Integer ipProtocol, java.lang.Integer initTcpSeqNum, java.lang.Integer fileDescriptor) {
    this.uuid = uuid;
    this.baseObject = baseObject;
    this.localAddress = localAddress;
    this.localPort = localPort;
    this.remoteAddress = remoteAddress;
    this.remotePort = remotePort;
    this.ipProtocol = ipProtocol;
    this.initTcpSeqNum = initTcpSeqNum;
    this.fileDescriptor = fileDescriptor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return baseObject;
    case 2: return localAddress;
    case 3: return localPort;
    case 4: return remoteAddress;
    case 5: return remotePort;
    case 6: return ipProtocol;
    case 7: return initTcpSeqNum;
    case 8: return fileDescriptor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 1: baseObject = (com.bbn.tc.schema.avro.cdm20.AbstractObject)value$; break;
    case 2: localAddress = (java.lang.CharSequence)value$; break;
    case 3: localPort = (java.lang.Integer)value$; break;
    case 4: remoteAddress = (java.lang.CharSequence)value$; break;
    case 5: remotePort = (java.lang.Integer)value$; break;
    case 6: ipProtocol = (java.lang.Integer)value$; break;
    case 7: initTcpSeqNum = (java.lang.Integer)value$; break;
    case 8: fileDescriptor = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Universally unique identifier for the object
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * Universally unique identifier for the object
   * @param value the value to set.
   */
  public void setUuid(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'baseObject' field.
   * @return The base object attributes
   */
  public com.bbn.tc.schema.avro.cdm20.AbstractObject getBaseObject() {
    return baseObject;
  }

  /**
   * Sets the value of the 'baseObject' field.
   * The base object attributes
   * @param value the value to set.
   */
  public void setBaseObject(com.bbn.tc.schema.avro.cdm20.AbstractObject value) {
    this.baseObject = value;
  }

  /**
   * Gets the value of the 'localAddress' field.
   * @return * The local IP address for this flow. Optional for when not
         * obtained initially.
   */
  public java.lang.CharSequence getLocalAddress() {
    return localAddress;
  }

  /**
   * Sets the value of the 'localAddress' field.
   * * The local IP address for this flow. Optional for when not
         * obtained initially.
   * @param value the value to set.
   */
  public void setLocalAddress(java.lang.CharSequence value) {
    this.localAddress = value;
  }

  /**
   * Gets the value of the 'localPort' field.
   * @return * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially.
   */
  public java.lang.Integer getLocalPort() {
    return localPort;
  }

  /**
   * Sets the value of the 'localPort' field.
   * * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially.
   * @param value the value to set.
   */
  public void setLocalPort(java.lang.Integer value) {
    this.localPort = value;
  }

  /**
   * Gets the value of the 'remoteAddress' field.
   * @return * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially.
   */
  public java.lang.CharSequence getRemoteAddress() {
    return remoteAddress;
  }

  /**
   * Sets the value of the 'remoteAddress' field.
   * * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially.
   * @param value the value to set.
   */
  public void setRemoteAddress(java.lang.CharSequence value) {
    this.remoteAddress = value;
  }

  /**
   * Gets the value of the 'remotePort' field.
   * @return * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially.
   */
  public java.lang.Integer getRemotePort() {
    return remotePort;
  }

  /**
   * Sets the value of the 'remotePort' field.
   * * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially.
   * @param value the value to set.
   */
  public void setRemotePort(java.lang.Integer value) {
    this.remotePort = value;
  }

  /**
   * Gets the value of the 'ipProtocol' field.
   * @return The IP protocol number e.g., TCP=6
   */
  public java.lang.Integer getIpProtocol() {
    return ipProtocol;
  }

  /**
   * Sets the value of the 'ipProtocol' field.
   * The IP protocol number e.g., TCP=6
   * @param value the value to set.
   */
  public void setIpProtocol(java.lang.Integer value) {
    this.ipProtocol = value;
  }

  /**
   * Gets the value of the 'initTcpSeqNum' field.
   * @return * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking.
   */
  public java.lang.Integer getInitTcpSeqNum() {
    return initTcpSeqNum;
  }

  /**
   * Sets the value of the 'initTcpSeqNum' field.
   * * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking.
   * @param value the value to set.
   */
  public void setInitTcpSeqNum(java.lang.Integer value) {
    this.initTcpSeqNum = value;
  }

  /**
   * Gets the value of the 'fileDescriptor' field.
   * @return The file descriptor (Optional)
   */
  public java.lang.Integer getFileDescriptor() {
    return fileDescriptor;
  }

  /**
   * Sets the value of the 'fileDescriptor' field.
   * The file descriptor (Optional)
   * @param value the value to set.
   */
  public void setFileDescriptor(java.lang.Integer value) {
    this.fileDescriptor = value;
  }

  /**
   * Creates a new NetFlowObject RecordBuilder.
   * @return A new NetFlowObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder();
  }

  /**
   * Creates a new NetFlowObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NetFlowObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder other) {
    return new com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder(other);
  }

  /**
   * Creates a new NetFlowObject RecordBuilder by copying an existing NetFlowObject instance.
   * @param other The existing instance to copy.
   * @return A new NetFlowObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.NetFlowObject other) {
    return new com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder(other);
  }

  /**
   * RecordBuilder for NetFlowObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NetFlowObject>
    implements org.apache.avro.data.RecordBuilder<NetFlowObject> {

    /** Universally unique identifier for the object */
    private com.bbn.tc.schema.avro.cdm20.UUID uuid;
    /** The base object attributes */
    private com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject;
    private com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder baseObjectBuilder;
    /** * The local IP address for this flow. Optional for when not
         * obtained initially. */
    private java.lang.CharSequence localAddress;
    /** * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially. */
    private java.lang.Integer localPort;
    /** * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially. */
    private java.lang.CharSequence remoteAddress;
    /** * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially. */
    private java.lang.Integer remotePort;
    /** The IP protocol number e.g., TCP=6 */
    private java.lang.Integer ipProtocol;
    /** * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking. */
    private java.lang.Integer initTcpSeqNum;
    /** The file descriptor (Optional) */
    private java.lang.Integer fileDescriptor;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      if (other.hasBaseObjectBuilder()) {
        this.baseObjectBuilder = com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder(other.getBaseObjectBuilder());
      }
      if (isValidValue(fields()[2], other.localAddress)) {
        this.localAddress = data().deepCopy(fields()[2].schema(), other.localAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.localPort)) {
        this.localPort = data().deepCopy(fields()[3].schema(), other.localPort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.remoteAddress)) {
        this.remoteAddress = data().deepCopy(fields()[4].schema(), other.remoteAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.remotePort)) {
        this.remotePort = data().deepCopy(fields()[5].schema(), other.remotePort);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ipProtocol)) {
        this.ipProtocol = data().deepCopy(fields()[6].schema(), other.ipProtocol);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.initTcpSeqNum)) {
        this.initTcpSeqNum = data().deepCopy(fields()[7].schema(), other.initTcpSeqNum);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.fileDescriptor)) {
        this.fileDescriptor = data().deepCopy(fields()[8].schema(), other.fileDescriptor);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NetFlowObject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.NetFlowObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      this.baseObjectBuilder = null;
      if (isValidValue(fields()[2], other.localAddress)) {
        this.localAddress = data().deepCopy(fields()[2].schema(), other.localAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.localPort)) {
        this.localPort = data().deepCopy(fields()[3].schema(), other.localPort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.remoteAddress)) {
        this.remoteAddress = data().deepCopy(fields()[4].schema(), other.remoteAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.remotePort)) {
        this.remotePort = data().deepCopy(fields()[5].schema(), other.remotePort);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ipProtocol)) {
        this.ipProtocol = data().deepCopy(fields()[6].schema(), other.ipProtocol);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.initTcpSeqNum)) {
        this.initTcpSeqNum = data().deepCopy(fields()[7].schema(), other.initTcpSeqNum);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.fileDescriptor)) {
        this.fileDescriptor = data().deepCopy(fields()[8].schema(), other.fileDescriptor);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setUuid(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Universally unique identifier for the object
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseObject' field.
      * The base object attributes
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.AbstractObject getBaseObject() {
      return baseObject;
    }

    /**
      * Sets the value of the 'baseObject' field.
      * The base object attributes
      * @param value The value of 'baseObject'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setBaseObject(com.bbn.tc.schema.avro.cdm20.AbstractObject value) {
      validate(fields()[1], value);
      this.baseObjectBuilder = null;
      this.baseObject = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'baseObject' field has been set.
      * The base object attributes
      * @return True if the 'baseObject' field has been set, false otherwise.
      */
    public boolean hasBaseObject() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'baseObject' field and creates one if it doesn't exist yet.
     * The base object attributes
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder getBaseObjectBuilder() {
      if (baseObjectBuilder == null) {
        if (hasBaseObject()) {
          setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder(baseObject));
        } else {
          setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder());
        }
      }
      return baseObjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'baseObject' field
     * The base object attributes
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder value) {
      clearBaseObject();
      baseObjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'baseObject' field has an active Builder instance
     * The base object attributes
     * @return True if the 'baseObject' field has an active Builder instance
     */
    public boolean hasBaseObjectBuilder() {
      return baseObjectBuilder != null;
    }

    /**
      * Clears the value of the 'baseObject' field.
      * The base object attributes
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearBaseObject() {
      baseObject = null;
      baseObjectBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'localAddress' field.
      * * The local IP address for this flow. Optional for when not
         * obtained initially.
      * @return The value.
      */
    public java.lang.CharSequence getLocalAddress() {
      return localAddress;
    }

    /**
      * Sets the value of the 'localAddress' field.
      * * The local IP address for this flow. Optional for when not
         * obtained initially.
      * @param value The value of 'localAddress'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setLocalAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.localAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'localAddress' field has been set.
      * * The local IP address for this flow. Optional for when not
         * obtained initially.
      * @return True if the 'localAddress' field has been set, false otherwise.
      */
    public boolean hasLocalAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'localAddress' field.
      * * The local IP address for this flow. Optional for when not
         * obtained initially.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearLocalAddress() {
      localAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'localPort' field.
      * * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially.
      * @return The value.
      */
    public java.lang.Integer getLocalPort() {
      return localPort;
    }

    /**
      * Sets the value of the 'localPort' field.
      * * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially.
      * @param value The value of 'localPort'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setLocalPort(java.lang.Integer value) {
      validate(fields()[3], value);
      this.localPort = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'localPort' field has been set.
      * * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially.
      * @return True if the 'localPort' field has been set, false otherwise.
      */
    public boolean hasLocalPort() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'localPort' field.
      * * The local network port for this flow. Optional for AF_UNIX
         * sockets (unnamed and abstract), or for when not obtained
         * initially.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearLocalPort() {
      localPort = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'remoteAddress' field.
      * * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially.
      * @return The value.
      */
    public java.lang.CharSequence getRemoteAddress() {
      return remoteAddress;
    }

    /**
      * Sets the value of the 'remoteAddress' field.
      * * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially.
      * @param value The value of 'remoteAddress'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setRemoteAddress(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.remoteAddress = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'remoteAddress' field has been set.
      * * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially.
      * @return True if the 'remoteAddress' field has been set, false otherwise.
      */
    public boolean hasRemoteAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'remoteAddress' field.
      * * The remote IP address for this flow. Optional for binds
         * that are a listening action and not a full connection, or
         * for when not obtained initially.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearRemoteAddress() {
      remoteAddress = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'remotePort' field.
      * * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially.
      * @return The value.
      */
    public java.lang.Integer getRemotePort() {
      return remotePort;
    }

    /**
      * Sets the value of the 'remotePort' field.
      * * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially.
      * @param value The value of 'remotePort'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setRemotePort(java.lang.Integer value) {
      validate(fields()[5], value);
      this.remotePort = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'remotePort' field has been set.
      * * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially.
      * @return True if the 'remotePort' field has been set, false otherwise.
      */
    public boolean hasRemotePort() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'remotePort' field.
      * * The remote network port for this flow. Optional for binds
         * that are a listening action and not a full connection. Also
         * optional for AF_UNIX sockets (unnamed and abstract) and for
         * when not obtained intially.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearRemotePort() {
      remotePort = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ipProtocol' field.
      * The IP protocol number e.g., TCP=6
      * @return The value.
      */
    public java.lang.Integer getIpProtocol() {
      return ipProtocol;
    }

    /**
      * Sets the value of the 'ipProtocol' field.
      * The IP protocol number e.g., TCP=6
      * @param value The value of 'ipProtocol'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setIpProtocol(java.lang.Integer value) {
      validate(fields()[6], value);
      this.ipProtocol = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ipProtocol' field has been set.
      * The IP protocol number e.g., TCP=6
      * @return True if the 'ipProtocol' field has been set, false otherwise.
      */
    public boolean hasIpProtocol() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ipProtocol' field.
      * The IP protocol number e.g., TCP=6
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearIpProtocol() {
      ipProtocol = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'initTcpSeqNum' field.
      * * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking.
      * @return The value.
      */
    public java.lang.Integer getInitTcpSeqNum() {
      return initTcpSeqNum;
    }

    /**
      * Sets the value of the 'initTcpSeqNum' field.
      * * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking.
      * @param value The value of 'initTcpSeqNum'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setInitTcpSeqNum(java.lang.Integer value) {
      validate(fields()[7], value);
      this.initTcpSeqNum = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'initTcpSeqNum' field has been set.
      * * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking.
      * @return True if the 'initTcpSeqNum' field has been set, false otherwise.
      */
    public boolean hasInitTcpSeqNum() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'initTcpSeqNum' field.
      * * The initial sequence number for a TCP connection (use the
         * SYN from the initiator). This is to correlate flows across
         * hosts for improved cross-host tracking.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearInitTcpSeqNum() {
      initTcpSeqNum = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileDescriptor' field.
      * The file descriptor (Optional)
      * @return The value.
      */
    public java.lang.Integer getFileDescriptor() {
      return fileDescriptor;
    }

    /**
      * Sets the value of the 'fileDescriptor' field.
      * The file descriptor (Optional)
      * @param value The value of 'fileDescriptor'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder setFileDescriptor(java.lang.Integer value) {
      validate(fields()[8], value);
      this.fileDescriptor = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'fileDescriptor' field has been set.
      * The file descriptor (Optional)
      * @return True if the 'fileDescriptor' field has been set, false otherwise.
      */
    public boolean hasFileDescriptor() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'fileDescriptor' field.
      * The file descriptor (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.NetFlowObject.Builder clearFileDescriptor() {
      fileDescriptor = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NetFlowObject build() {
      try {
        NetFlowObject record = new NetFlowObject();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[0]);
        if (baseObjectBuilder != null) {
          record.baseObject = this.baseObjectBuilder.build();
        } else {
          record.baseObject = fieldSetFlags()[1] ? this.baseObject : (com.bbn.tc.schema.avro.cdm20.AbstractObject) defaultValue(fields()[1]);
        }
        record.localAddress = fieldSetFlags()[2] ? this.localAddress : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.localPort = fieldSetFlags()[3] ? this.localPort : (java.lang.Integer) defaultValue(fields()[3]);
        record.remoteAddress = fieldSetFlags()[4] ? this.remoteAddress : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.remotePort = fieldSetFlags()[5] ? this.remotePort : (java.lang.Integer) defaultValue(fields()[5]);
        record.ipProtocol = fieldSetFlags()[6] ? this.ipProtocol : (java.lang.Integer) defaultValue(fields()[6]);
        record.initTcpSeqNum = fieldSetFlags()[7] ? this.initTcpSeqNum : (java.lang.Integer) defaultValue(fields()[7]);
        record.fileDescriptor = fieldSetFlags()[8] ? this.fileDescriptor : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NetFlowObject>
    WRITER$ = (org.apache.avro.io.DatumWriter<NetFlowObject>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NetFlowObject>
    READER$ = (org.apache.avro.io.DatumReader<NetFlowObject>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
