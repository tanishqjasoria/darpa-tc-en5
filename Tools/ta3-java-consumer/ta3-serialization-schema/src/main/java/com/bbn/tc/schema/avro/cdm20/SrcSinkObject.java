/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm20;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** * Represents a generic source or sink on the host device that is can be a file, memory, or netflow.
     * This is the most basic representation of a source or sink, basically specifying its type only. */
@org.apache.avro.specific.AvroGenerated
public class SrcSinkObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4544001299849337797L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SrcSinkObject\",\"namespace\":\"com.bbn.tc.schema.avro.cdm20\",\"doc\":\"* Represents a generic source or sink on the host device that is can be a file, memory, or netflow.\\n     * This is the most basic representation of a source or sink, basically specifying its type only.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"doc\":\"* A host MUST NOT reuse UUIDs at all within their system, even\\n     * across restarts, and definitely not for 2 distinct objects\",\"size\":16},\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":{\"type\":\"record\",\"name\":\"AbstractObject\",\"doc\":\"*  Objects, in general, represent data sources and sinks which\\n     *  could include sockets, files, memory, and any data in general\\n     *  that can be an input and/or output to an event.  This record\\n     *  is intended to be abstract i.e., one should not instantiate an\\n     *  Object but rather instantiate one of its sub types (ie,\\n     *  encapsulating records) FileObject, UnnamedPipeObject,\\n     *  RegistryKeyObject, NetFlowObject, MemoryObject, or\\n     *  SrcSinkObject.\",\"fields\":[{\"name\":\"permission\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"SHORT\",\"size\":2}],\"doc\":\"Permission bits defined over the object (Optional)\",\"default\":null},{\"name\":\"epoch\",\"type\":[\"null\",\"int\"],\"doc\":\"* Used to track when an object is deleted and a new one is\\n         * created with the same identifier. This is useful for when\\n         * UUIDs are based on something not likely to be unique, such\\n         * as file path.\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null,\"order\":\"ignore\"}]},\"doc\":\"The base object attributes\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SrcSinkType\",\"doc\":\"* There are many types of sources such as sensors.  The type of a\\n     * sensor could be base (close to hardware) or composite.  This is\\n     * mostly (only?) applicable to the Android platform.  See\\n     * https://source.android.com/devices/sensors/index.html for\\n     * details.\",\"symbols\":[\"SRCSINK_ACCELEROMETER\",\"SRCSINK_TEMPERATURE\",\"SRCSINK_GYROSCOPE\",\"SRCSINK_MAGNETIC_FIELD\",\"SRCSINK_HEART_RATE\",\"SRCSINK_LIGHT\",\"SRCSINK_PROXIMITY\",\"SRCSINK_PRESSURE\",\"SRCSINK_RELATIVE_HUMIDITY\",\"SRCSINK_LINEAR_ACCELERATION\",\"SRCSINK_MOTION\",\"SRCSINK_STEP_DETECTOR\",\"SRCSINK_STEP_COUNTER\",\"SRCSINK_TILT_DETECTOR\",\"SRCSINK_ROTATION_VECTOR\",\"SRCSINK_GRAVITY\",\"SRCSINK_GEOMAGNETIC_ROTATION_VECTOR\",\"SRCSINK_GPS\",\"SRCSINK_AUDIO\",\"SRCSINK_SYSTEM_PROPERTY\",\"SRCSINK_ENV_VARIABLE\",\"SRCSINK_ACCESSIBILITY_SERVICE\",\"SRCSINK_ACTIVITY_MANAGEMENT\",\"SRCSINK_ALARM_SERVICE\",\"SRCSINK_ANDROID_AUTO\",\"SRCSINK_ANDROID_RADIO\",\"SRCSINK_ANDROID_TV\",\"SRCSINK_ANDROID_VR\",\"SRCSINK_AUDIO_IO\",\"SRCSINK_AUTOFILL\",\"SRCSINK_BACKUP_MANAGER\",\"SRCSINK_BINDER\",\"SRCSINK_BLUETOOTH\",\"SRCSINK_BOOT_EVENT\",\"SRCSINK_BROADCAST_RECEIVER_MANAGEMENT\",\"SRCSINK_CAMERA\",\"SRCSINK_CLIPBOARD\",\"SRCSINK_COMPANION_DEVICE\",\"SRCSINK_COMPONENT_MANAGEMENT\",\"SRCSINK_CONTENT_PROVIDER\",\"SRCSINK_CONTENT_PROVIDER_MANAGEMENT\",\"SRCSINK_DATABASE\",\"SRCSINK_DEVICE_ADMIN\",\"SRCSINK_DEVICE_SEARCH\",\"SRCSINK_DEVICE_USER\",\"SRCSINK_DISPLAY\",\"SRCSINK_DROPBOX\",\"SRCSINK_EMAIL\",\"SRCSINK_EXPERIMENTAL\",\"SRCSINK_FILE\",\"SRCSINK_FILE_SYSTEM\",\"SRCSINK_FILE_SYSTEM_MANAGEMENT\",\"SRCSINK_FINGERPRINT\",\"SRCSINK_FLASHLIGHT\",\"SRCSINK_GATEKEEPER\",\"SRCSINK_HDMI\",\"SRCSINK_IDLE_DOCK_SCREEN\",\"SRCSINK_IMS\",\"SRCSINK_INFRARED\",\"SRCSINK_INSTALLED_PACKAGES\",\"SRCSINK_JSSE_TRUST_MANAGER\",\"SRCSINK_KEYCHAIN\",\"SRCSINK_KEYGUARD\",\"SRCSINK_LOCATION\",\"SRCSINK_LOWPAN\",\"SRCSINK_MACHINE_LEARNING\",\"SRCSINK_MBMS\",\"SRCSINK_MEDIA\",\"SRCSINK_MEDIA_CAPTURE\",\"SRCSINK_MEDIA_LOCAL_MANAGEMENT\",\"SRCSINK_MEDIA_LOCAL_PLAYBACK\",\"SRCSINK_MEDIA_NETWORK_CONNECTION\",\"SRCSINK_MEDIA_REMOTE_PLAYBACK\",\"SRCSINK_MIDI\",\"SRCSINK_NATIVE\",\"SRCSINK_NETWORK\",\"SRCSINK_NETWORK_MANAGEMENT\",\"SRCSINK_NFC\",\"SRCSINK_NOTIFICATION\",\"SRCSINK_OVERLAY_MANAGER\",\"SRCSINK_PAC_PROXY\",\"SRCSINK_PERMISSIONS\",\"SRCSINK_PERSISTANT_DATA\",\"SRCSINK_POSIX\",\"SRCSINK_POWER_MANAGEMENT\",\"SRCSINK_PRINT_SERVICE\",\"SRCSINK_PROCESS_MANAGEMENT\",\"SRCSINK_QUICK_SETTINGS\",\"SRCSINK_RECEIVER_MANAGEMENT\",\"SRCSINK_RCS\",\"SRCSINK_RPC\",\"SRCSINK_SCREEN_AUDIO_CAPTURE\",\"SRCSINK_SERIAL_PORT\",\"SRCSINK_SERVICE_CONNECTION\",\"SRCSINK_SERVICE_MANAGEMENT\",\"SRCSINK_SHORTCUTS\",\"SRCSINK_SMS_MMS\",\"SRCSINK_SPEECH_INTERACTION\",\"SRCSINK_STATUS_BAR\",\"SRCSINK_SYNC_FRAMEWORK\",\"SRCSINK_SYSTEM_UPDATE\",\"SRCSINK_TASK_STACK\",\"SRCSINK_TELEPHONY\",\"SRCSINK_TEST\",\"SRCSINK_TEXT_SERVICES\",\"SRCSINK_THREADING\",\"SRCSINK_TIME_EVENT\",\"SRCSINK_UI\",\"SRCSINK_UID_EVENT\",\"SRCSINK_UI_AUTOMATION\",\"SRCSINK_UI_MODE\",\"SRCSINK_UI_RPC\",\"SRCSINK_USAGE_STATS\",\"SRCSINK_USB\",\"SRCSINK_USER_ACCOUNTS_MANAGEMENT\",\"SRCSINK_USER_INPUT\",\"SRCSINK_VIBRATOR\",\"SRCSINK_WAKE_LOCK\",\"SRCSINK_WALLPAPER_MANAGER\",\"SRCSINK_WAP\",\"SRCSINK_WEB_BROWSER\",\"SRCSINK_WIDGETS\",\"SRCSINK_IPC\",\"SRCSINK_UNKNOWN\"]},\"doc\":\"The type of the object\"},{\"name\":\"fileDescriptor\",\"type\":[\"null\",\"int\"],\"doc\":\"The file descriptor (Optional)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SrcSinkObject> ENCODER =
      new BinaryMessageEncoder<SrcSinkObject>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SrcSinkObject> DECODER =
      new BinaryMessageDecoder<SrcSinkObject>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SrcSinkObject> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SrcSinkObject> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SrcSinkObject>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SrcSinkObject to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SrcSinkObject from a ByteBuffer. */
  public static SrcSinkObject fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Universally unique identifier for the object */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID uuid;
  /** The base object attributes */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject;
  /** The type of the object */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.SrcSinkType type;
  /** The file descriptor (Optional) */
  @Deprecated public java.lang.Integer fileDescriptor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SrcSinkObject() {}

  /**
   * All-args constructor.
   * @param uuid Universally unique identifier for the object
   * @param baseObject The base object attributes
   * @param type The type of the object
   * @param fileDescriptor The file descriptor (Optional)
   */
  public SrcSinkObject(com.bbn.tc.schema.avro.cdm20.UUID uuid, com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject, com.bbn.tc.schema.avro.cdm20.SrcSinkType type, java.lang.Integer fileDescriptor) {
    this.uuid = uuid;
    this.baseObject = baseObject;
    this.type = type;
    this.fileDescriptor = fileDescriptor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return baseObject;
    case 2: return type;
    case 3: return fileDescriptor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 1: baseObject = (com.bbn.tc.schema.avro.cdm20.AbstractObject)value$; break;
    case 2: type = (com.bbn.tc.schema.avro.cdm20.SrcSinkType)value$; break;
    case 3: fileDescriptor = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Universally unique identifier for the object
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * Universally unique identifier for the object
   * @param value the value to set.
   */
  public void setUuid(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'baseObject' field.
   * @return The base object attributes
   */
  public com.bbn.tc.schema.avro.cdm20.AbstractObject getBaseObject() {
    return baseObject;
  }

  /**
   * Sets the value of the 'baseObject' field.
   * The base object attributes
   * @param value the value to set.
   */
  public void setBaseObject(com.bbn.tc.schema.avro.cdm20.AbstractObject value) {
    this.baseObject = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of the object
   */
  public com.bbn.tc.schema.avro.cdm20.SrcSinkType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of the object
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.cdm20.SrcSinkType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'fileDescriptor' field.
   * @return The file descriptor (Optional)
   */
  public java.lang.Integer getFileDescriptor() {
    return fileDescriptor;
  }

  /**
   * Sets the value of the 'fileDescriptor' field.
   * The file descriptor (Optional)
   * @param value the value to set.
   */
  public void setFileDescriptor(java.lang.Integer value) {
    this.fileDescriptor = value;
  }

  /**
   * Creates a new SrcSinkObject RecordBuilder.
   * @return A new SrcSinkObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder();
  }

  /**
   * Creates a new SrcSinkObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SrcSinkObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder other) {
    return new com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder(other);
  }

  /**
   * Creates a new SrcSinkObject RecordBuilder by copying an existing SrcSinkObject instance.
   * @param other The existing instance to copy.
   * @return A new SrcSinkObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.SrcSinkObject other) {
    return new com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder(other);
  }

  /**
   * RecordBuilder for SrcSinkObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SrcSinkObject>
    implements org.apache.avro.data.RecordBuilder<SrcSinkObject> {

    /** Universally unique identifier for the object */
    private com.bbn.tc.schema.avro.cdm20.UUID uuid;
    /** The base object attributes */
    private com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject;
    private com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder baseObjectBuilder;
    /** The type of the object */
    private com.bbn.tc.schema.avro.cdm20.SrcSinkType type;
    /** The file descriptor (Optional) */
    private java.lang.Integer fileDescriptor;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      if (other.hasBaseObjectBuilder()) {
        this.baseObjectBuilder = com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder(other.getBaseObjectBuilder());
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fileDescriptor)) {
        this.fileDescriptor = data().deepCopy(fields()[3].schema(), other.fileDescriptor);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SrcSinkObject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.SrcSinkObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      this.baseObjectBuilder = null;
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fileDescriptor)) {
        this.fileDescriptor = data().deepCopy(fields()[3].schema(), other.fileDescriptor);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder setUuid(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Universally unique identifier for the object
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseObject' field.
      * The base object attributes
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.AbstractObject getBaseObject() {
      return baseObject;
    }

    /**
      * Sets the value of the 'baseObject' field.
      * The base object attributes
      * @param value The value of 'baseObject'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder setBaseObject(com.bbn.tc.schema.avro.cdm20.AbstractObject value) {
      validate(fields()[1], value);
      this.baseObjectBuilder = null;
      this.baseObject = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'baseObject' field has been set.
      * The base object attributes
      * @return True if the 'baseObject' field has been set, false otherwise.
      */
    public boolean hasBaseObject() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'baseObject' field and creates one if it doesn't exist yet.
     * The base object attributes
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder getBaseObjectBuilder() {
      if (baseObjectBuilder == null) {
        if (hasBaseObject()) {
          setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder(baseObject));
        } else {
          setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder());
        }
      }
      return baseObjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'baseObject' field
     * The base object attributes
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder value) {
      clearBaseObject();
      baseObjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'baseObject' field has an active Builder instance
     * The base object attributes
     * @return True if the 'baseObject' field has an active Builder instance
     */
    public boolean hasBaseObjectBuilder() {
      return baseObjectBuilder != null;
    }

    /**
      * Clears the value of the 'baseObject' field.
      * The base object attributes
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder clearBaseObject() {
      baseObject = null;
      baseObjectBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of the object
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of the object
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder setType(com.bbn.tc.schema.avro.cdm20.SrcSinkType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of the object
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of the object
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileDescriptor' field.
      * The file descriptor (Optional)
      * @return The value.
      */
    public java.lang.Integer getFileDescriptor() {
      return fileDescriptor;
    }

    /**
      * Sets the value of the 'fileDescriptor' field.
      * The file descriptor (Optional)
      * @param value The value of 'fileDescriptor'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder setFileDescriptor(java.lang.Integer value) {
      validate(fields()[3], value);
      this.fileDescriptor = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fileDescriptor' field has been set.
      * The file descriptor (Optional)
      * @return True if the 'fileDescriptor' field has been set, false otherwise.
      */
    public boolean hasFileDescriptor() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fileDescriptor' field.
      * The file descriptor (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.SrcSinkObject.Builder clearFileDescriptor() {
      fileDescriptor = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SrcSinkObject build() {
      try {
        SrcSinkObject record = new SrcSinkObject();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[0]);
        if (baseObjectBuilder != null) {
          record.baseObject = this.baseObjectBuilder.build();
        } else {
          record.baseObject = fieldSetFlags()[1] ? this.baseObject : (com.bbn.tc.schema.avro.cdm20.AbstractObject) defaultValue(fields()[1]);
        }
        record.type = fieldSetFlags()[2] ? this.type : (com.bbn.tc.schema.avro.cdm20.SrcSinkType) defaultValue(fields()[2]);
        record.fileDescriptor = fieldSetFlags()[3] ? this.fileDescriptor : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SrcSinkObject>
    WRITER$ = (org.apache.avro.io.DatumWriter<SrcSinkObject>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SrcSinkObject>
    READER$ = (org.apache.avro.io.DatumReader<SrcSinkObject>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
