/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm20;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** * Values represent transient data, mainly parameters to
     * events. Values are created and used once within an event's
     * execution and are relevant mainly during fine-grained tracking
     * (such as with tag/taint propagation).  Values have tags
     * describing their provenance. Sometimes the actual value's value
     * is reported in addition to the value's metadata
     *
     * The size of the value is the number of elements of type
     * valueDataType. This should be -1 for primitive and complex
     * types.  For arrays, the size is the array length. i.e., if
     * size >= 0, then this value is an array.  A complex value (such as
     * an object) can contain other values (primitives or other
     * complex values) within it, as components.
     *
     * Examples: <br>
     *
     * an integer will have size=-1 and valueDataType=INT, and
     * valueBytes.length=4 bytes <br>
     *
     * an int[4] will have size=4 and valueDataType=INT, and
     * valueBytes.length=16 bytes (4*4) <br>
     *
     * a string s="abc" has size=3 and valueDataType=CHAR, and
     * valueBytes.length=12 bytes (UTF32_BE encoding; 4 bytes per
     * char) <br>
     *
     * an MyClass obj has size=-1, valueDataType=COMPLEX,
     * runtimeDataType="MyClass", valueBytes=<pointer> <br> */
@org.apache.avro.specific.AvroGenerated
public class Value extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6861447068107700739L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Value\",\"namespace\":\"com.bbn.tc.schema.avro.cdm20\",\"doc\":\"* Values represent transient data, mainly parameters to\\n     * events. Values are created and used once within an event's\\n     * execution and are relevant mainly during fine-grained tracking\\n     * (such as with tag/taint propagation).  Values have tags\\n     * describing their provenance. Sometimes the actual value's value\\n     * is reported in addition to the value's metadata\\n     *\\n     * The size of the value is the number of elements of type\\n     * valueDataType. This should be -1 for primitive and complex\\n     * types.  For arrays, the size is the array length. i.e., if\\n     * size >= 0, then this value is an array.  A complex value (such as\\n     * an object) can contain other values (primitives or other\\n     * complex values) within it, as components.\\n     *\\n     * Examples: <br>\\n     *\\n     * an integer will have size=-1 and valueDataType=INT, and\\n     * valueBytes.length=4 bytes <br>\\n     *\\n     * an int[4] will have size=4 and valueDataType=INT, and\\n     * valueBytes.length=16 bytes (4*4) <br>\\n     *\\n     * a string s=\\\"abc\\\" has size=3 and valueDataType=CHAR, and\\n     * valueBytes.length=12 bytes (UTF32_BE encoding; 4 bytes per\\n     * char) <br>\\n     *\\n     * an MyClass obj has size=-1, valueDataType=COMPLEX,\\n     * runtimeDataType=\\\"MyClass\\\", valueBytes=<pointer> <br>\",\"fields\":[{\"name\":\"size\",\"type\":\"int\",\"doc\":\"The size of the value: the number of elements of type valueDataType; -1 for non-arrays\",\"default\":-1},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ValueType\",\"doc\":\"* A value type is either source, sink, or control This is for\\n     * Event parameters to distinguish source/sink values vs control\\n     * parameters (such as a file descriptor).\",\"symbols\":[\"VALUE_TYPE_SRC\",\"VALUE_TYPE_SINK\",\"VALUE_TYPE_CONTROL\"]},\"doc\":\"The type indicates whether it's a source, sink, or control value\"},{\"name\":\"valueDataType\",\"type\":{\"type\":\"enum\",\"name\":\"ValueDataType\",\"doc\":\"* A value data type is one of the primitive data types. A string is treated as a char array\",\"symbols\":[\"VALUE_DATA_TYPE_BYTE\",\"VALUE_DATA_TYPE_BOOL\",\"VALUE_DATA_TYPE_CHAR\",\"VALUE_DATA_TYPE_SHORT\",\"VALUE_DATA_TYPE_INT\",\"VALUE_DATA_TYPE_FLOAT\",\"VALUE_DATA_TYPE_LONG\",\"VALUE_DATA_TYPE_DOUBLE\",\"VALUE_DATA_TYPE_POINTER32\",\"VALUE_DATA_TYPE_POINTER64\",\"VALUE_DATA_TYPE_COMPLEX\"]},\"doc\":\"The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)\\n         *  Strings are treated as char[] so type=CHAR\\n         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])\\n         *  Complex composite objects comprising of primitive values use the COMPLEX type\"},{\"name\":\"isNull\",\"type\":\"boolean\",\"doc\":\"Whether this value is null, needed to indicate null objects (default: false)\",\"default\":false},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"the name of the Value, string. (Optional)\",\"default\":null},{\"name\":\"runtimeDataType\",\"type\":[\"null\",\"string\"],\"doc\":\"The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have\\n         *  a runtime data type of say \\\"MyClass\\\"\",\"default\":null},{\"name\":\"valueBytes\",\"type\":[\"null\",\"bytes\"],\"doc\":\"* The actual bytes of the value in Big Endian format, e.g.,\\n         * an int is converted to a 4 byte buffer (Optional)\\n         *\\n         * Strings are represented as an array of UTF32_BE encoded\\n         * characters (i.e., 4 bytes per char)\",\"default\":null},{\"name\":\"provenance\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProvenanceAssertion\",\"doc\":\"* An assertion about the provenance of information\",\"fields\":[{\"name\":\"asserter\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"doc\":\"* A host MUST NOT reuse UUIDs at all within their system, even\\n     * across restarts, and definitely not for 2 distinct objects\",\"size\":16},\"doc\":\"Which Subject is making this assertion?\"},{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"UUID\"}],\"doc\":\"Object(s) that this Value's data came from.\",\"default\":null},{\"name\":\"provenance\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"ProvenanceAssertion\"}],\"doc\":\"* Further provenance assertions within this assertion.\\n\\t * For example, to describe a situation in which X asserts that\\n\\t * Y asserts that Z asserts that V came from {p,q}:\\n\\t *\\n\\t * ```\\n\\t * Event {\\n\\t *   subject = X,\\n\\t *   parameters = [\\n\\t *     Value (V) {\\n\\t *       provenance = [\\n\\t *         ProvenanceAssertion {\\n\\t *           asserter = UUID of X,\\n\\t *           sources = [ UUID of p, UUID of q ],\\n\\t *           provenance = [\\n\\t *             ProvenanceAssertion {\\n\\t *               asserter = UUID of Y,\\n\\t *               provenance = [\\n\\t *                 ProvenanceAssertion {\\n\\t *                   asserter = UUID of Z,\\n\\t *                 },\\n\\t *               ],\\n\\t *             },\\n\\t *           ],\\n\\t *         },\\n\\t *       ],\\n\\t *     },\\n\\t *   ],\\n\\t * }\\n\\t * ```\\n\\t * Z should have a provenance assertion\\n\\t * e.g.,\\n         * \\\"X asserts that Y asserts that Z comes from {p,q}\\\".\",\"default\":null}]}}],\"doc\":\"* Assertions about the provenance of this value\\n         * (e.g., the file that data is claimed to come from).\\n         *\\n         * This is a direct assertion about provenance for systems that don't\\n         * use tags to track data flows.\",\"default\":null},{\"name\":\"tag\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TagRunLengthTuple\",\"doc\":\"* This record is a single tuple in a run length encoding of tags\",\"fields\":[{\"name\":\"numValueElements\",\"type\":\"int\",\"default\":0},{\"name\":\"tagId\",\"type\":\"UUID\"}]}}],\"doc\":\"* The value's tag expression describing its provenance (Optional)\\n         * Since value could be an array, the tag can use run length encoding if needed.\",\"default\":null},{\"name\":\"components\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Value\"}],\"doc\":\"A complex value might comprise other component values if needed (Optional)\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Value> ENCODER =
      new BinaryMessageEncoder<Value>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Value> DECODER =
      new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Value> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Value> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Value to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Value from a ByteBuffer. */
  public static Value fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The size of the value: the number of elements of type valueDataType; -1 for non-arrays */
  @Deprecated public int size;
  /** The type indicates whether it's a source, sink, or control value */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.ValueType type;
  /** The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.ValueDataType valueDataType;
  /** Whether this value is null, needed to indicate null objects (default: false) */
  @Deprecated public boolean isNull;
  /** the name of the Value, string. (Optional) */
  @Deprecated public java.lang.CharSequence name;
  /** The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass" */
  @Deprecated public java.lang.CharSequence runtimeDataType;
  /** * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char) */
  @Deprecated public java.nio.ByteBuffer valueBytes;
  /** * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows. */
  @Deprecated public java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion> provenance;
  /** * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. */
  @Deprecated public java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple> tag;
  /** A complex value might comprise other component values if needed (Optional) */
  @Deprecated public java.util.List<com.bbn.tc.schema.avro.cdm20.Value> components;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Value() {}

  /**
   * All-args constructor.
   * @param size The size of the value: the number of elements of type valueDataType; -1 for non-arrays
   * @param type The type indicates whether it's a source, sink, or control value
   * @param valueDataType The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
   * @param isNull Whether this value is null, needed to indicate null objects (default: false)
   * @param name the name of the Value, string. (Optional)
   * @param runtimeDataType The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
   * @param valueBytes * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char)
   * @param provenance * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows.
   * @param tag * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed.
   * @param components A complex value might comprise other component values if needed (Optional)
   */
  public Value(java.lang.Integer size, com.bbn.tc.schema.avro.cdm20.ValueType type, com.bbn.tc.schema.avro.cdm20.ValueDataType valueDataType, java.lang.Boolean isNull, java.lang.CharSequence name, java.lang.CharSequence runtimeDataType, java.nio.ByteBuffer valueBytes, java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion> provenance, java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple> tag, java.util.List<com.bbn.tc.schema.avro.cdm20.Value> components) {
    this.size = size;
    this.type = type;
    this.valueDataType = valueDataType;
    this.isNull = isNull;
    this.name = name;
    this.runtimeDataType = runtimeDataType;
    this.valueBytes = valueBytes;
    this.provenance = provenance;
    this.tag = tag;
    this.components = components;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return size;
    case 1: return type;
    case 2: return valueDataType;
    case 3: return isNull;
    case 4: return name;
    case 5: return runtimeDataType;
    case 6: return valueBytes;
    case 7: return provenance;
    case 8: return tag;
    case 9: return components;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: size = (java.lang.Integer)value$; break;
    case 1: type = (com.bbn.tc.schema.avro.cdm20.ValueType)value$; break;
    case 2: valueDataType = (com.bbn.tc.schema.avro.cdm20.ValueDataType)value$; break;
    case 3: isNull = (java.lang.Boolean)value$; break;
    case 4: name = (java.lang.CharSequence)value$; break;
    case 5: runtimeDataType = (java.lang.CharSequence)value$; break;
    case 6: valueBytes = (java.nio.ByteBuffer)value$; break;
    case 7: provenance = (java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion>)value$; break;
    case 8: tag = (java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple>)value$; break;
    case 9: components = (java.util.List<com.bbn.tc.schema.avro.cdm20.Value>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'size' field.
   * @return The size of the value: the number of elements of type valueDataType; -1 for non-arrays
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * The size of the value: the number of elements of type valueDataType; -1 for non-arrays
   * @param value the value to set.
   */
  public void setSize(java.lang.Integer value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type indicates whether it's a source, sink, or control value
   */
  public com.bbn.tc.schema.avro.cdm20.ValueType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type indicates whether it's a source, sink, or control value
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.cdm20.ValueType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'valueDataType' field.
   * @return The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
   */
  public com.bbn.tc.schema.avro.cdm20.ValueDataType getValueDataType() {
    return valueDataType;
  }

  /**
   * Sets the value of the 'valueDataType' field.
   * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
   * @param value the value to set.
   */
  public void setValueDataType(com.bbn.tc.schema.avro.cdm20.ValueDataType value) {
    this.valueDataType = value;
  }

  /**
   * Gets the value of the 'isNull' field.
   * @return Whether this value is null, needed to indicate null objects (default: false)
   */
  public java.lang.Boolean getIsNull() {
    return isNull;
  }

  /**
   * Sets the value of the 'isNull' field.
   * Whether this value is null, needed to indicate null objects (default: false)
   * @param value the value to set.
   */
  public void setIsNull(java.lang.Boolean value) {
    this.isNull = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return the name of the Value, string. (Optional)
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * the name of the Value, string. (Optional)
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'runtimeDataType' field.
   * @return The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
   */
  public java.lang.CharSequence getRuntimeDataType() {
    return runtimeDataType;
  }

  /**
   * Sets the value of the 'runtimeDataType' field.
   * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
   * @param value the value to set.
   */
  public void setRuntimeDataType(java.lang.CharSequence value) {
    this.runtimeDataType = value;
  }

  /**
   * Gets the value of the 'valueBytes' field.
   * @return * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char)
   */
  public java.nio.ByteBuffer getValueBytes() {
    return valueBytes;
  }

  /**
   * Sets the value of the 'valueBytes' field.
   * * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char)
   * @param value the value to set.
   */
  public void setValueBytes(java.nio.ByteBuffer value) {
    this.valueBytes = value;
  }

  /**
   * Gets the value of the 'provenance' field.
   * @return * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows.
   */
  public java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion> getProvenance() {
    return provenance;
  }

  /**
   * Sets the value of the 'provenance' field.
   * * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows.
   * @param value the value to set.
   */
  public void setProvenance(java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion> value) {
    this.provenance = value;
  }

  /**
   * Gets the value of the 'tag' field.
   * @return * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed.
   */
  public java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple> getTag() {
    return tag;
  }

  /**
   * Sets the value of the 'tag' field.
   * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed.
   * @param value the value to set.
   */
  public void setTag(java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple> value) {
    this.tag = value;
  }

  /**
   * Gets the value of the 'components' field.
   * @return A complex value might comprise other component values if needed (Optional)
   */
  public java.util.List<com.bbn.tc.schema.avro.cdm20.Value> getComponents() {
    return components;
  }

  /**
   * Sets the value of the 'components' field.
   * A complex value might comprise other component values if needed (Optional)
   * @param value the value to set.
   */
  public void setComponents(java.util.List<com.bbn.tc.schema.avro.cdm20.Value> value) {
    this.components = value;
  }

  /**
   * Creates a new Value RecordBuilder.
   * @return A new Value RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.Value.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.cdm20.Value.Builder();
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Value RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.Value.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.Value.Builder other) {
    return new com.bbn.tc.schema.avro.cdm20.Value.Builder(other);
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Value instance.
   * @param other The existing instance to copy.
   * @return A new Value RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.Value.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.Value other) {
    return new com.bbn.tc.schema.avro.cdm20.Value.Builder(other);
  }

  /**
   * RecordBuilder for Value instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Value>
    implements org.apache.avro.data.RecordBuilder<Value> {

    /** The size of the value: the number of elements of type valueDataType; -1 for non-arrays */
    private int size;
    /** The type indicates whether it's a source, sink, or control value */
    private com.bbn.tc.schema.avro.cdm20.ValueType type;
    /** The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type */
    private com.bbn.tc.schema.avro.cdm20.ValueDataType valueDataType;
    /** Whether this value is null, needed to indicate null objects (default: false) */
    private boolean isNull;
    /** the name of the Value, string. (Optional) */
    private java.lang.CharSequence name;
    /** The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass" */
    private java.lang.CharSequence runtimeDataType;
    /** * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char) */
    private java.nio.ByteBuffer valueBytes;
    /** * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows. */
    private java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion> provenance;
    /** * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed. */
    private java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple> tag;
    /** A complex value might comprise other component values if needed (Optional) */
    private java.util.List<com.bbn.tc.schema.avro.cdm20.Value> components;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.Value.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valueDataType)) {
        this.valueDataType = data().deepCopy(fields()[2].schema(), other.valueDataType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isNull)) {
        this.isNull = data().deepCopy(fields()[3].schema(), other.isNull);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.runtimeDataType)) {
        this.runtimeDataType = data().deepCopy(fields()[5].schema(), other.runtimeDataType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.valueBytes)) {
        this.valueBytes = data().deepCopy(fields()[6].schema(), other.valueBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.provenance)) {
        this.provenance = data().deepCopy(fields()[7].schema(), other.provenance);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.tag)) {
        this.tag = data().deepCopy(fields()[8].schema(), other.tag);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.components)) {
        this.components = data().deepCopy(fields()[9].schema(), other.components);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Value instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.Value other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valueDataType)) {
        this.valueDataType = data().deepCopy(fields()[2].schema(), other.valueDataType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isNull)) {
        this.isNull = data().deepCopy(fields()[3].schema(), other.isNull);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.runtimeDataType)) {
        this.runtimeDataType = data().deepCopy(fields()[5].schema(), other.runtimeDataType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.valueBytes)) {
        this.valueBytes = data().deepCopy(fields()[6].schema(), other.valueBytes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.provenance)) {
        this.provenance = data().deepCopy(fields()[7].schema(), other.provenance);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.tag)) {
        this.tag = data().deepCopy(fields()[8].schema(), other.tag);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.components)) {
        this.components = data().deepCopy(fields()[9].schema(), other.components);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'size' field.
      * The size of the value: the number of elements of type valueDataType; -1 for non-arrays
      * @return The value.
      */
    public java.lang.Integer getSize() {
      return size;
    }

    /**
      * Sets the value of the 'size' field.
      * The size of the value: the number of elements of type valueDataType; -1 for non-arrays
      * @param value The value of 'size'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setSize(int value) {
      validate(fields()[0], value);
      this.size = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * The size of the value: the number of elements of type valueDataType; -1 for non-arrays
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'size' field.
      * The size of the value: the number of elements of type valueDataType; -1 for non-arrays
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearSize() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type indicates whether it's a source, sink, or control value
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.ValueType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type indicates whether it's a source, sink, or control value
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setType(com.bbn.tc.schema.avro.cdm20.ValueType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type indicates whether it's a source, sink, or control value
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * The type indicates whether it's a source, sink, or control value
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueDataType' field.
      * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.ValueDataType getValueDataType() {
      return valueDataType;
    }

    /**
      * Sets the value of the 'valueDataType' field.
      * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
      * @param value The value of 'valueDataType'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setValueDataType(com.bbn.tc.schema.avro.cdm20.ValueDataType value) {
      validate(fields()[2], value);
      this.valueDataType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'valueDataType' field has been set.
      * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
      * @return True if the 'valueDataType' field has been set, false otherwise.
      */
    public boolean hasValueDataType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'valueDataType' field.
      * The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)
         *  Strings are treated as char[] so type=CHAR
         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])
         *  Complex composite objects comprising of primitive values use the COMPLEX type
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearValueDataType() {
      valueDataType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isNull' field.
      * Whether this value is null, needed to indicate null objects (default: false)
      * @return The value.
      */
    public java.lang.Boolean getIsNull() {
      return isNull;
    }

    /**
      * Sets the value of the 'isNull' field.
      * Whether this value is null, needed to indicate null objects (default: false)
      * @param value The value of 'isNull'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setIsNull(boolean value) {
      validate(fields()[3], value);
      this.isNull = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isNull' field has been set.
      * Whether this value is null, needed to indicate null objects (default: false)
      * @return True if the 'isNull' field has been set, false otherwise.
      */
    public boolean hasIsNull() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isNull' field.
      * Whether this value is null, needed to indicate null objects (default: false)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearIsNull() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * the name of the Value, string. (Optional)
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * the name of the Value, string. (Optional)
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * the name of the Value, string. (Optional)
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'name' field.
      * the name of the Value, string. (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearName() {
      name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'runtimeDataType' field.
      * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
      * @return The value.
      */
    public java.lang.CharSequence getRuntimeDataType() {
      return runtimeDataType;
    }

    /**
      * Sets the value of the 'runtimeDataType' field.
      * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
      * @param value The value of 'runtimeDataType'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setRuntimeDataType(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.runtimeDataType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'runtimeDataType' field has been set.
      * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
      * @return True if the 'runtimeDataType' field has been set, false otherwise.
      */
    public boolean hasRuntimeDataType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'runtimeDataType' field.
      * The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have
         *  a runtime data type of say "MyClass"
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearRuntimeDataType() {
      runtimeDataType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueBytes' field.
      * * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char)
      * @return The value.
      */
    public java.nio.ByteBuffer getValueBytes() {
      return valueBytes;
    }

    /**
      * Sets the value of the 'valueBytes' field.
      * * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char)
      * @param value The value of 'valueBytes'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setValueBytes(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.valueBytes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'valueBytes' field has been set.
      * * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char)
      * @return True if the 'valueBytes' field has been set, false otherwise.
      */
    public boolean hasValueBytes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'valueBytes' field.
      * * The actual bytes of the value in Big Endian format, e.g.,
         * an int is converted to a 4 byte buffer (Optional)
         *
         * Strings are represented as an array of UTF32_BE encoded
         * characters (i.e., 4 bytes per char)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearValueBytes() {
      valueBytes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'provenance' field.
      * * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows.
      * @return The value.
      */
    public java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion> getProvenance() {
      return provenance;
    }

    /**
      * Sets the value of the 'provenance' field.
      * * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows.
      * @param value The value of 'provenance'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setProvenance(java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion> value) {
      validate(fields()[7], value);
      this.provenance = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'provenance' field has been set.
      * * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows.
      * @return True if the 'provenance' field has been set, false otherwise.
      */
    public boolean hasProvenance() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'provenance' field.
      * * Assertions about the provenance of this value
         * (e.g., the file that data is claimed to come from).
         *
         * This is a direct assertion about provenance for systems that don't
         * use tags to track data flows.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearProvenance() {
      provenance = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'tag' field.
      * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed.
      * @return The value.
      */
    public java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple> getTag() {
      return tag;
    }

    /**
      * Sets the value of the 'tag' field.
      * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed.
      * @param value The value of 'tag'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setTag(java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple> value) {
      validate(fields()[8], value);
      this.tag = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'tag' field has been set.
      * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed.
      * @return True if the 'tag' field has been set, false otherwise.
      */
    public boolean hasTag() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'tag' field.
      * * The value's tag expression describing its provenance (Optional)
         * Since value could be an array, the tag can use run length encoding if needed.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearTag() {
      tag = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'components' field.
      * A complex value might comprise other component values if needed (Optional)
      * @return The value.
      */
    public java.util.List<com.bbn.tc.schema.avro.cdm20.Value> getComponents() {
      return components;
    }

    /**
      * Sets the value of the 'components' field.
      * A complex value might comprise other component values if needed (Optional)
      * @param value The value of 'components'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder setComponents(java.util.List<com.bbn.tc.schema.avro.cdm20.Value> value) {
      validate(fields()[9], value);
      this.components = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'components' field has been set.
      * A complex value might comprise other component values if needed (Optional)
      * @return True if the 'components' field has been set, false otherwise.
      */
    public boolean hasComponents() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'components' field.
      * A complex value might comprise other component values if needed (Optional)
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.Value.Builder clearComponents() {
      components = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Value build() {
      try {
        Value record = new Value();
        record.size = fieldSetFlags()[0] ? this.size : (java.lang.Integer) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (com.bbn.tc.schema.avro.cdm20.ValueType) defaultValue(fields()[1]);
        record.valueDataType = fieldSetFlags()[2] ? this.valueDataType : (com.bbn.tc.schema.avro.cdm20.ValueDataType) defaultValue(fields()[2]);
        record.isNull = fieldSetFlags()[3] ? this.isNull : (java.lang.Boolean) defaultValue(fields()[3]);
        record.name = fieldSetFlags()[4] ? this.name : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.runtimeDataType = fieldSetFlags()[5] ? this.runtimeDataType : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.valueBytes = fieldSetFlags()[6] ? this.valueBytes : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.provenance = fieldSetFlags()[7] ? this.provenance : (java.util.List<com.bbn.tc.schema.avro.cdm20.ProvenanceAssertion>) defaultValue(fields()[7]);
        record.tag = fieldSetFlags()[8] ? this.tag : (java.util.List<com.bbn.tc.schema.avro.cdm20.TagRunLengthTuple>) defaultValue(fields()[8]);
        record.components = fieldSetFlags()[9] ? this.components : (java.util.List<com.bbn.tc.schema.avro.cdm20.Value>) defaultValue(fields()[9]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Value>
    WRITER$ = (org.apache.avro.io.DatumWriter<Value>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Value>
    READER$ = (org.apache.avro.io.DatumReader<Value>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
