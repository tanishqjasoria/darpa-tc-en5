/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bbn.tc.schema.avro.cdm20;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** * Represents an IPC. Instantiates an AbstractObject. */
@org.apache.avro.specific.AvroGenerated
public class IpcObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2153421750110400022L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IpcObject\",\"namespace\":\"com.bbn.tc.schema.avro.cdm20\",\"doc\":\"* Represents an IPC. Instantiates an AbstractObject.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"fixed\",\"name\":\"UUID\",\"doc\":\"* A host MUST NOT reuse UUIDs at all within their system, even\\n     * across restarts, and definitely not for 2 distinct objects\",\"size\":16},\"doc\":\"Universally unique identifier for the object\"},{\"name\":\"baseObject\",\"type\":{\"type\":\"record\",\"name\":\"AbstractObject\",\"doc\":\"*  Objects, in general, represent data sources and sinks which\\n     *  could include sockets, files, memory, and any data in general\\n     *  that can be an input and/or output to an event.  This record\\n     *  is intended to be abstract i.e., one should not instantiate an\\n     *  Object but rather instantiate one of its sub types (ie,\\n     *  encapsulating records) FileObject, UnnamedPipeObject,\\n     *  RegistryKeyObject, NetFlowObject, MemoryObject, or\\n     *  SrcSinkObject.\",\"fields\":[{\"name\":\"permission\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"SHORT\",\"size\":2}],\"doc\":\"Permission bits defined over the object (Optional)\",\"default\":null},{\"name\":\"epoch\",\"type\":[\"null\",\"int\"],\"doc\":\"* Used to track when an object is deleted and a new one is\\n         * created with the same identifier. This is useful for when\\n         * UUIDs are based on something not likely to be unique, such\\n         * as file path.\",\"default\":null},{\"name\":\"properties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"* Arbitrary key, value pairs describing the entity.\\n         * NOTE: This attribute is meant as a temporary place holder for items that\\n         * will become first-class attributes in the next CDM version.\",\"default\":null,\"order\":\"ignore\"}]},\"doc\":\"The base object attributes\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"IpcObjectType\",\"doc\":\"* These types enumerate the types of IpcObjects\",\"symbols\":[\"IPC_OBJECT_PIPE_NAMED\",\"IPC_OBJECT_PIPE_UNNAMED\",\"IPC_OBJECT_SOCKET_ABSTRACT\",\"IPC_OBJECT_SOCKET_PAIR\",\"IPC_OBJECT_SOCKET_PATHNAME\",\"IPC_OBJECT_SOCKET_UNNAMED\",\"IPC_OBJECT_WINDOWS_ALPC\",\"IPC_OBJECT_WINDOWS_MAILSLOT\",\"IPC_OBJECT_SOCKET_NETLINK\"]},\"doc\":\"The type of IpcObject\"},{\"name\":\"uuid1\",\"type\":[\"null\",\"UUID\"],\"doc\":\"* If flow is unidirectional, then source is UUID1/fd1 and\\n         * destination is UUID2/fd2.\",\"default\":null},{\"name\":\"uuid2\",\"type\":[\"null\",\"UUID\"],\"default\":null},{\"name\":\"fd1\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"fd2\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IpcObject> ENCODER =
      new BinaryMessageEncoder<IpcObject>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IpcObject> DECODER =
      new BinaryMessageDecoder<IpcObject>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<IpcObject> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<IpcObject> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<IpcObject>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this IpcObject to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a IpcObject from a ByteBuffer. */
  public static IpcObject fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Universally unique identifier for the object */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID uuid;
  /** The base object attributes */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject;
  /** The type of IpcObject */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.IpcObjectType type;
  /** * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2. */
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID uuid1;
  @Deprecated public com.bbn.tc.schema.avro.cdm20.UUID uuid2;
  @Deprecated public java.lang.Integer fd1;
  @Deprecated public java.lang.Integer fd2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IpcObject() {}

  /**
   * All-args constructor.
   * @param uuid Universally unique identifier for the object
   * @param baseObject The base object attributes
   * @param type The type of IpcObject
   * @param uuid1 * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2.
   * @param uuid2 The new value for uuid2
   * @param fd1 The new value for fd1
   * @param fd2 The new value for fd2
   */
  public IpcObject(com.bbn.tc.schema.avro.cdm20.UUID uuid, com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject, com.bbn.tc.schema.avro.cdm20.IpcObjectType type, com.bbn.tc.schema.avro.cdm20.UUID uuid1, com.bbn.tc.schema.avro.cdm20.UUID uuid2, java.lang.Integer fd1, java.lang.Integer fd2) {
    this.uuid = uuid;
    this.baseObject = baseObject;
    this.type = type;
    this.uuid1 = uuid1;
    this.uuid2 = uuid2;
    this.fd1 = fd1;
    this.fd2 = fd2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return baseObject;
    case 2: return type;
    case 3: return uuid1;
    case 4: return uuid2;
    case 5: return fd1;
    case 6: return fd2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 1: baseObject = (com.bbn.tc.schema.avro.cdm20.AbstractObject)value$; break;
    case 2: type = (com.bbn.tc.schema.avro.cdm20.IpcObjectType)value$; break;
    case 3: uuid1 = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 4: uuid2 = (com.bbn.tc.schema.avro.cdm20.UUID)value$; break;
    case 5: fd1 = (java.lang.Integer)value$; break;
    case 6: fd2 = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Universally unique identifier for the object
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * Universally unique identifier for the object
   * @param value the value to set.
   */
  public void setUuid(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'baseObject' field.
   * @return The base object attributes
   */
  public com.bbn.tc.schema.avro.cdm20.AbstractObject getBaseObject() {
    return baseObject;
  }

  /**
   * Sets the value of the 'baseObject' field.
   * The base object attributes
   * @param value the value to set.
   */
  public void setBaseObject(com.bbn.tc.schema.avro.cdm20.AbstractObject value) {
    this.baseObject = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The type of IpcObject
   */
  public com.bbn.tc.schema.avro.cdm20.IpcObjectType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of IpcObject
   * @param value the value to set.
   */
  public void setType(com.bbn.tc.schema.avro.cdm20.IpcObjectType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'uuid1' field.
   * @return * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2.
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getUuid1() {
    return uuid1;
  }

  /**
   * Sets the value of the 'uuid1' field.
   * * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2.
   * @param value the value to set.
   */
  public void setUuid1(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.uuid1 = value;
  }

  /**
   * Gets the value of the 'uuid2' field.
   * @return The value of the 'uuid2' field.
   */
  public com.bbn.tc.schema.avro.cdm20.UUID getUuid2() {
    return uuid2;
  }

  /**
   * Sets the value of the 'uuid2' field.
   * @param value the value to set.
   */
  public void setUuid2(com.bbn.tc.schema.avro.cdm20.UUID value) {
    this.uuid2 = value;
  }

  /**
   * Gets the value of the 'fd1' field.
   * @return The value of the 'fd1' field.
   */
  public java.lang.Integer getFd1() {
    return fd1;
  }

  /**
   * Sets the value of the 'fd1' field.
   * @param value the value to set.
   */
  public void setFd1(java.lang.Integer value) {
    this.fd1 = value;
  }

  /**
   * Gets the value of the 'fd2' field.
   * @return The value of the 'fd2' field.
   */
  public java.lang.Integer getFd2() {
    return fd2;
  }

  /**
   * Sets the value of the 'fd2' field.
   * @param value the value to set.
   */
  public void setFd2(java.lang.Integer value) {
    this.fd2 = value;
  }

  /**
   * Creates a new IpcObject RecordBuilder.
   * @return A new IpcObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.IpcObject.Builder newBuilder() {
    return new com.bbn.tc.schema.avro.cdm20.IpcObject.Builder();
  }

  /**
   * Creates a new IpcObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IpcObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.IpcObject.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.IpcObject.Builder other) {
    return new com.bbn.tc.schema.avro.cdm20.IpcObject.Builder(other);
  }

  /**
   * Creates a new IpcObject RecordBuilder by copying an existing IpcObject instance.
   * @param other The existing instance to copy.
   * @return A new IpcObject RecordBuilder
   */
  public static com.bbn.tc.schema.avro.cdm20.IpcObject.Builder newBuilder(com.bbn.tc.schema.avro.cdm20.IpcObject other) {
    return new com.bbn.tc.schema.avro.cdm20.IpcObject.Builder(other);
  }

  /**
   * RecordBuilder for IpcObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IpcObject>
    implements org.apache.avro.data.RecordBuilder<IpcObject> {

    /** Universally unique identifier for the object */
    private com.bbn.tc.schema.avro.cdm20.UUID uuid;
    /** The base object attributes */
    private com.bbn.tc.schema.avro.cdm20.AbstractObject baseObject;
    private com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder baseObjectBuilder;
    /** The type of IpcObject */
    private com.bbn.tc.schema.avro.cdm20.IpcObjectType type;
    /** * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2. */
    private com.bbn.tc.schema.avro.cdm20.UUID uuid1;
    private com.bbn.tc.schema.avro.cdm20.UUID uuid2;
    private java.lang.Integer fd1;
    private java.lang.Integer fd2;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.IpcObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      if (other.hasBaseObjectBuilder()) {
        this.baseObjectBuilder = com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder(other.getBaseObjectBuilder());
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uuid1)) {
        this.uuid1 = data().deepCopy(fields()[3].schema(), other.uuid1);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.uuid2)) {
        this.uuid2 = data().deepCopy(fields()[4].schema(), other.uuid2);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.fd1)) {
        this.fd1 = data().deepCopy(fields()[5].schema(), other.fd1);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.fd2)) {
        this.fd2 = data().deepCopy(fields()[6].schema(), other.fd2);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing IpcObject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bbn.tc.schema.avro.cdm20.IpcObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseObject)) {
        this.baseObject = data().deepCopy(fields()[1].schema(), other.baseObject);
        fieldSetFlags()[1] = true;
      }
      this.baseObjectBuilder = null;
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uuid1)) {
        this.uuid1 = data().deepCopy(fields()[3].schema(), other.uuid1);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.uuid2)) {
        this.uuid2 = data().deepCopy(fields()[4].schema(), other.uuid2);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.fd1)) {
        this.fd1 = data().deepCopy(fields()[5].schema(), other.fd1);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.fd2)) {
        this.fd2 = data().deepCopy(fields()[6].schema(), other.fd2);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder setUuid(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Universally unique identifier for the object
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Universally unique identifier for the object
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseObject' field.
      * The base object attributes
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.AbstractObject getBaseObject() {
      return baseObject;
    }

    /**
      * Sets the value of the 'baseObject' field.
      * The base object attributes
      * @param value The value of 'baseObject'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder setBaseObject(com.bbn.tc.schema.avro.cdm20.AbstractObject value) {
      validate(fields()[1], value);
      this.baseObjectBuilder = null;
      this.baseObject = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'baseObject' field has been set.
      * The base object attributes
      * @return True if the 'baseObject' field has been set, false otherwise.
      */
    public boolean hasBaseObject() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'baseObject' field and creates one if it doesn't exist yet.
     * The base object attributes
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder getBaseObjectBuilder() {
      if (baseObjectBuilder == null) {
        if (hasBaseObject()) {
          setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder(baseObject));
        } else {
          setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.newBuilder());
        }
      }
      return baseObjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'baseObject' field
     * The base object attributes
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder setBaseObjectBuilder(com.bbn.tc.schema.avro.cdm20.AbstractObject.Builder value) {
      clearBaseObject();
      baseObjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'baseObject' field has an active Builder instance
     * The base object attributes
     * @return True if the 'baseObject' field has an active Builder instance
     */
    public boolean hasBaseObjectBuilder() {
      return baseObjectBuilder != null;
    }

    /**
      * Clears the value of the 'baseObject' field.
      * The base object attributes
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder clearBaseObject() {
      baseObject = null;
      baseObjectBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The type of IpcObject
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObjectType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The type of IpcObject
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder setType(com.bbn.tc.schema.avro.cdm20.IpcObjectType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The type of IpcObject
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * The type of IpcObject
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid1' field.
      * * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getUuid1() {
      return uuid1;
    }

    /**
      * Sets the value of the 'uuid1' field.
      * * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2.
      * @param value The value of 'uuid1'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder setUuid1(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[3], value);
      this.uuid1 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid1' field has been set.
      * * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2.
      * @return True if the 'uuid1' field has been set, false otherwise.
      */
    public boolean hasUuid1() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'uuid1' field.
      * * If flow is unidirectional, then source is UUID1/fd1 and
         * destination is UUID2/fd2.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder clearUuid1() {
      uuid1 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid2' field.
      * @return The value.
      */
    public com.bbn.tc.schema.avro.cdm20.UUID getUuid2() {
      return uuid2;
    }

    /**
      * Sets the value of the 'uuid2' field.
      * @param value The value of 'uuid2'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder setUuid2(com.bbn.tc.schema.avro.cdm20.UUID value) {
      validate(fields()[4], value);
      this.uuid2 = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid2' field has been set.
      * @return True if the 'uuid2' field has been set, false otherwise.
      */
    public boolean hasUuid2() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'uuid2' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder clearUuid2() {
      uuid2 = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'fd1' field.
      * @return The value.
      */
    public java.lang.Integer getFd1() {
      return fd1;
    }

    /**
      * Sets the value of the 'fd1' field.
      * @param value The value of 'fd1'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder setFd1(java.lang.Integer value) {
      validate(fields()[5], value);
      this.fd1 = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'fd1' field has been set.
      * @return True if the 'fd1' field has been set, false otherwise.
      */
    public boolean hasFd1() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'fd1' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder clearFd1() {
      fd1 = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'fd2' field.
      * @return The value.
      */
    public java.lang.Integer getFd2() {
      return fd2;
    }

    /**
      * Sets the value of the 'fd2' field.
      * @param value The value of 'fd2'.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder setFd2(java.lang.Integer value) {
      validate(fields()[6], value);
      this.fd2 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'fd2' field has been set.
      * @return True if the 'fd2' field has been set, false otherwise.
      */
    public boolean hasFd2() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'fd2' field.
      * @return This builder.
      */
    public com.bbn.tc.schema.avro.cdm20.IpcObject.Builder clearFd2() {
      fd2 = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IpcObject build() {
      try {
        IpcObject record = new IpcObject();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[0]);
        if (baseObjectBuilder != null) {
          record.baseObject = this.baseObjectBuilder.build();
        } else {
          record.baseObject = fieldSetFlags()[1] ? this.baseObject : (com.bbn.tc.schema.avro.cdm20.AbstractObject) defaultValue(fields()[1]);
        }
        record.type = fieldSetFlags()[2] ? this.type : (com.bbn.tc.schema.avro.cdm20.IpcObjectType) defaultValue(fields()[2]);
        record.uuid1 = fieldSetFlags()[3] ? this.uuid1 : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[3]);
        record.uuid2 = fieldSetFlags()[4] ? this.uuid2 : (com.bbn.tc.schema.avro.cdm20.UUID) defaultValue(fields()[4]);
        record.fd1 = fieldSetFlags()[5] ? this.fd1 : (java.lang.Integer) defaultValue(fields()[5]);
        record.fd2 = fieldSetFlags()[6] ? this.fd2 : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IpcObject>
    WRITER$ = (org.apache.avro.io.DatumWriter<IpcObject>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IpcObject>
    READER$ = (org.apache.avro.io.DatumReader<IpcObject>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
